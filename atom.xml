<?xml version="1.0" encoding="utf-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Vaibhav Sagar's blog</title>
    <link href="https://vaibhavsagar.com/atom.xml" rel="self" />
    <link href="https://vaibhavsagar.com" />
    <id>https://vaibhavsagar.com/atom.xml</id>
    <author>
        <name>Vaibhav Sagar</name>
        <email>vaibhavsagar@gmail.com</email>
    </author>
    <updated>2023-01-29T00:00:00Z</updated>
    <entry>
    <title>Using `ghc-syntax-highlighter` with Hakyll</title>
    <link href="https://vaibhavsagar.com/blog/2023/01/29/ghc-syntax-hakyll/" />
    <id>https://vaibhavsagar.com/blog/2023/01/29/ghc-syntax-hakyll/index.html</id>
    <published>2023-01-29</published>
    <updated>2023-01-29T00:00:00Z</updated>
    <summary type="html"><div class="info">
    Posted on 29 January 2023
    
</div>
<div class="info">
    
        Tags: <a title="All pages tagged &#39;haskell&#39;." href="/blog/tags/haskell/index.html">haskell</a>, <a title="All pages tagged &#39;programming&#39;." href="/blog/tags/programming/index.html">programming</a>
    
</div>

<p>In 2018, <a href="https://markkarpov.com/post/announcing-ghc-syntax-highlighter.html">Mark Karpov announced
<code>ghc-syntax-highlighter</code></a>,
a project which uses GHC’s own lexer to tokenise Haskell source code for the
best possible syntax highlighting. I thought this was extremely cool, and
really wanted to use it for this blog. Unfortunately, this is what the post had
to say about <code>pandoc</code>, which Hakyll uses to process Markdown:</p>
<blockquote>
<p><a href="https://hackage.haskell.org/package/skylighting"><code>skylighting</code></a> is what
Pandoc uses btw. And from what I can tell it’s hardcoded to use only that
library for highlighting, so some creativity may be necessary to get it work.</p>
</blockquote>
<p>I briefly looked into this and reached the same conclusion (and as of this
writing <a href="https://github.com/jgm/pandoc/blob/5f31a01d77f5fea46e2deca51165d5af8fc99677/src/Text/Pandoc/Highlighting.hs#L76-L106">it is still the
case</a>)
so, as a deeply uncreative individual, I sighed deeply and resigned myself to never knowing this particular joy.</p>
<p>Until, just a few days ago, I read <a href="https://tony-zorman.com/posts/2023-01-21-pygmentising-hakyll.html">this lovely blog post by Tony Zorman about
customising Hakyll’s syntax
highlighting</a>
which included this gem of a sentence in the very first paragraph:</p>
<blockquote>
<p>Using <code>pygmentize</code> as an example, I will show you how you can swap out
pandoc’s native syntax highlighting with pretty much any third party tool that
can output HTML.</p>
</blockquote>
<p>And in fact this is an accurate description of what follows. This sounds like
exactly what I want to do, and between this and Mark’s
<a href="https://hackage.haskell.org/package/mmark-ext"><code>mmark-ext</code></a> (which <a href="https://hackage.haskell.org/package/mmark-ext-0.2.1.5/docs/Text-MMark-Extension-GhcSyntaxHighlighter.html">implements
<code>ghc-syntax-highlighter</code> support as an extension for
<code>mmark</code></a>)
I was able to successfully follow the instructions to get
<code>ghc-syntax-highlighter</code> working with my blog. Let me walk you through what
I did.</p>
<p>Here are the language extensions I will be using:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="pp">{-# LANGUAGE LambdaCase        #-}</span><span>
</span><span class="pp">{-# LANGUAGE OverloadedStrings #-}</span><span>
</span><span class="pp">{-# LANGUAGE ViewPatterns      #-}</span></code></pre></div>
<p>and these additional imports:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span><span>           </span><span class="dt">GHC.SyntaxHighlighter</span><span> </span><span class="ot">(</span><span class="dt">Token</span><span class="ot">(</span><span class="ot">..</span><span class="ot">)</span><span class="ot">,</span><span> </span><span class="va">tokenizeHaskell</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span>           </span><span class="dt">Text.Blaze.Html.Renderer.Text</span><span> </span><span class="ot">(</span><span class="va">renderHtml</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span>           </span><span class="dt">Text.Pandoc.Definition</span><span> </span><span class="ot">(</span><span class="dt">Block</span><span> </span><span class="ot">(</span><span class="dt">CodeBlock</span><span class="ot">,</span><span> </span><span class="dt">RawBlock</span><span class="ot">)</span><span class="ot">,</span><span> </span><span class="dt">Pandoc</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span>           </span><span class="dt">Text.Pandoc.Walk</span><span> </span><span class="ot">(</span><span class="va">walk</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Text.Blaze.Html5</span><span> </span><span class="kw">as</span><span> </span><span class="dt">H</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Text.Blaze.Html5.Attributes</span><span> </span><span class="kw">as</span><span> </span><span class="dt">A</span></code></pre></div>
<p>I chose to use <a href="https://hackage.haskell.org/package/blaze-html"><code>blaze-html</code></a>
since it is already a transitive dependency of <code>pandoc</code> and using it has no
impact on our dependency tree.</p>
<p>Tony uses <code>walkM</code> since an external program (<code>pygmentize</code>) is involved, but
since we are working with pure Haskell code we can get away with just <code>walk</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="va">ghcSyntaxHighlight</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Pandoc</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Pandoc</span><span>
</span><span class="va">ghcSyntaxHighlight</span><span> </span><span class="ot">=</span><span> </span><span class="va">walk</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="ot">case</span><span>
    </span><span class="dt">CodeBlock</span><span> </span><span class="ot">(</span><span class="ot">_</span><span class="ot">,</span><span> </span><span class="ot">(</span><span class="va">isHaskell</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">True</span><span class="ot">)</span><span class="ot">:</span><span class="ot">_</span><span class="ot">,</span><span> </span><span class="ot">_</span><span class="ot">)</span><span> </span><span class="ot">(</span><span class="va">tokenizeHaskell</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Just</span><span> </span><span class="va">tokens</span><span class="ot">)</span><span> </span><span class="ot">-&gt;</span><span>
        </span><span class="dt">RawBlock</span><span> </span><span class="st">&quot;html&quot;</span><span> </span><span class="op">.</span><span> </span><span class="va">L.toStrict</span><span> </span><span class="op">.</span><span> </span><span class="va">renderHtml</span><span> </span><span class="op">$</span><span> </span><span class="va">formatHaskellTokens</span><span> </span><span class="va">tokens</span><span>
    </span><span class="va">block</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">block</span><span>
    </span><span class="kw">where</span><span> </span><span class="va">isHaskell</span><span> </span><span class="ot">=</span><span> </span><span class="ot">(</span><span class="op">==</span><span> </span><span class="st">&quot;haskell&quot;</span><span class="ot">)</span></code></pre></div>
<p>This only matches Haskell code blocks which <code>tokenizeHaskell</code> is able to
successfully tokenise and otherwise falls back on existing <code>pandoc</code> behaviour.</p>
<p><code>formatHaskellTokens</code> generates markup very similarly to what <code>pandoc</code> already
does:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="va">formatHaskellTokens</span><span> </span><span class="ot">::</span><span> </span><span class="ot">[</span><span class="ot">(</span><span class="dt">Token</span><span class="ot">,</span><span> </span><span class="dt">T.Text</span><span class="ot">)</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">H.Html</span><span>
</span><span class="va">formatHaskellTokens</span><span> </span><span class="va">tokens</span><span> </span><span class="ot">=</span><span>
    </span><span class="va">H.div</span><span> </span><span class="op">H.!</span><span> </span><span class="va">A.class_</span><span> </span><span class="st">&quot;sourceCode&quot;</span><span> </span><span class="op">$</span><span>
        </span><span class="va">H.pre</span><span> </span><span class="op">H.!</span><span> </span><span class="va">A.class_</span><span> </span><span class="st">&quot;sourceCode haskell&quot;</span><span> </span><span class="op">$</span><span>
            </span><span class="va">H.code</span><span> </span><span class="op">H.!</span><span> </span><span class="va">A.class_</span><span> </span><span class="st">&quot;sourceCode haskell&quot;</span><span> </span><span class="op">$</span><span>
                </span><span class="va">mapM_</span><span> </span><span class="va">tokenToHtml</span><span> </span><span class="va">tokens</span></code></pre></div>
<p><code>tokenizeHaskell</code> produces a list of pairs of the token type (<code>KeywordToken</code>,
<code>VariableToken</code>, etc.) and the matched text, and the <code>tokenToHtml</code> (<a href="https://hackage.haskell.org/package/mmark-ext-0.2.1.5/docs/src/Text.MMark.Extension.GhcSyntaxHighlighter.html#tokenToHtml">adapted
from
<code>mmark-ext</code></a>)
function creates a <code>span</code> element with the appropriate class name for our CSS
to style:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="va">tokenToHtml</span><span> </span><span class="ot">::</span><span> </span><span class="ot">(</span><span class="dt">Token</span><span class="ot">,</span><span> </span><span class="dt">T.Text</span><span class="ot">)</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">H.Html</span><span>
</span><span class="va">tokenToHtml</span><span> </span><span class="ot">(</span><span class="va">tokenClass</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">className</span><span class="ot">,</span><span> </span><span class="va">text</span><span class="ot">)</span><span> </span><span class="ot">=</span><span>
    </span><span class="va">H.span</span><span> </span><span class="op">H.!?</span><span> </span><span class="ot">(</span><span class="va">not</span><span> </span><span class="op">$</span><span> </span><span class="va">T.null</span><span> </span><span class="va">className</span><span class="ot">,</span><span> </span><span class="va">A.class_</span><span> </span><span class="ot">(</span><span class="va">H.toValue</span><span> </span><span class="va">className</span><span class="ot">)</span><span class="ot">)</span><span> </span><span class="op">$</span><span>
        </span><span class="va">H.toHtml</span><span> </span><span class="va">text</span></code></pre></div>
<p><code>tokenClass</code> (<a href="https://hackage.haskell.org/package/mmark-ext-0.2.1.5/docs/src/Text.MMark.Extension.GhcSyntaxHighlighter.html#tokenClass">also adapted from
<code>mmark-ext</code></a>)
outputs the appropriate class name for each token, and I made only minor
changes for styling purposes:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="va">tokenClass</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Token</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">T.Text</span><span>
</span><span class="va">tokenClass</span><span> </span><span class="ot">=</span><span> </span><span class="ot">\</span><span class="ot">case</span><span>
    </span><span class="dt">KeywordTok</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="st">&quot;kw&quot;</span><span>
    </span><span class="dt">PragmaTok</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="st">&quot;pp&quot;</span><span> </span><span class="co">-- Preprocessor</span><span>
    </span><span class="dt">SymbolTok</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="st">&quot;ot&quot;</span><span> </span><span class="co">-- Other</span><span>
    </span><span class="dt">VariableTok</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="st">&quot;va&quot;</span><span>
    </span><span class="dt">ConstructorTok</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="st">&quot;dt&quot;</span><span> </span><span class="co">-- DataType</span><span>
    </span><span class="dt">OperatorTok</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="st">&quot;op&quot;</span><span>
    </span><span class="dt">CharTok</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="st">&quot;ch&quot;</span><span>
    </span><span class="dt">StringTok</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="st">&quot;st&quot;</span><span>
    </span><span class="dt">IntegerTok</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="st">&quot;dv&quot;</span><span> </span><span class="co">-- DecVal</span><span>
    </span><span class="dt">RationalTok</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="st">&quot;dv&quot;</span><span> </span><span class="co">-- DecVal</span><span>
    </span><span class="dt">CommentTok</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="st">&quot;co&quot;</span><span>
    </span><span class="dt">SpaceTok</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="st">&quot;&quot;</span><span>
    </span><span class="dt">OtherTok</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="st">&quot;ot&quot;</span></code></pre></div>
<p>Finally we have to actually use <code>ghcSyntaxHighlight</code>, for which we define
a replacement for <code>pandocCompiler</code> called (imaginatively)
<code>customPandocCompiler</code> and use it everywhere:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="va">customPandocCompiler</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Compiler</span><span> </span><span class="ot">(</span><span class="dt">Item</span><span> </span><span class="dt">String</span><span class="ot">)</span><span>
</span><span class="va">customPandocCompiler</span><span> </span><span class="ot">=</span><span>
    </span><span class="va">pandocCompilerWithTransform</span><span>
        </span><span class="va">defaultHakyllReaderOptions</span><span>
        </span><span class="va">defaultHakyllWriterOptions</span><span>
        </span><span class="va">ghcSyntaxHighlight</span></code></pre></div>
<p>Again, since we are using pure functions, we can get away with
<code>pandocCompilerWithTransform</code> instead of <code>pandocCompilerWithTransformM</code>.</p>
<p>And we’re done! I also had to tweak my CSS slightly since <code>pandoc</code> was
generating a <code>span</code> for each line of source code instead of each token like
<code>ghc-syntax-highlighter</code> does. For the complete listing, see
<a href="https://github.com/vaibhavsagar/website/blob/6415721a318fc8fb31f4aadb7cd40ab6aad4fbc4/site.hs">here</a>.</p>
</summary>
</entry>
<entry>
    <title>Updating IHaskell to a Newer GHC</title>
    <link href="https://vaibhavsagar.com/blog/2021/05/02/updating-ihaskell-newer-ghc/" />
    <id>https://vaibhavsagar.com/blog/2021/05/02/updating-ihaskell-newer-ghc/index.html</id>
    <published>2021-05-02</published>
    <updated>2021-05-02T00:00:00Z</updated>
    <summary type="html"><div class="info">
    Posted on  2 May 2021
    
</div>
<div class="info">
    
        Tags: <a title="All pages tagged &#39;haskell&#39;." href="/blog/tags/haskell/index.html">haskell</a>, <a title="All pages tagged &#39;programming&#39;." href="/blog/tags/programming/index.html">programming</a>, <a title="All pages tagged &#39;nix&#39;." href="/blog/tags/nix/index.html">nix</a>
    
</div>

<p>As the current maintainer of IHaskell, I see myself as having one primary
responsibility: keeping it up-to-date with newer GHC releases. The chain of
events that led to me becoming a maintainer started with the then-latest
version of IHaskell not having support for GHC 8.0, and I still remember how
frustrated I felt when dealing with this limitation.</p>
<p>Since then I’ve had the opportunity to add GHC 8.2, 8.4, 8.6, 8.8, 8.10, and
now 9.0 support, but because I only have to do this every 6 months or so (at
the earliest) I promptly forget the details of this work afterwards and have to
spelunk through old, often heavily amended, commits to rediscover what
past me (who is notoriously bad at documentation) did.</p>
<p>At the time of writing, GHC 9.2 is expected to be released soon and I don’t
want to forget everything I’ve just (re)learned when that happens.
Additionally, it is conceivable that at some point someone other than me would
like to take a crack at updating IHaskell to the newest version of GHC. This
blog post details the steps I took to make these tasks easier in the future.</p>
<h2 id="building-ihaskells-dependencies">Building IHaskell’s dependencies</h2>
<p>I should start by saying that my current approach relies heavily on Nix and the
infrastructure available in <a href="https://github.com/NixOS/nixpkgs"><code>nixpkgs</code></a>. If
you don’t want to use Nix for whatever reason the general ideas might still
translate to whatever method you use instead but the details will almost
certainly vary widely.</p>
<p>The objective of this first step is to get us to the point where all of
IHaskell’s dependencies are building, so that we can then focus on
<code>ghc-parser</code>, <code>ipython-kernel</code>, and <code>ihaskell</code> exclusively.</p>
<p>I start with a version of Nixpkgs that has the necessary GHC version and
package overrides to minimise work. As of this writing, the Nixpkgs maintainers
base the Haskell package set they use on <a href="https://www.stackage.org/">Stackage</a>
Nightlies with overrides added from
<a href="https://gitlab.haskell.org/ghc/head.hackage"><code>head.hackage</code></a>. Updates seem to
go into the
<a href="https://github.com/NixOS/nixpkgs/tree/haskell-updates"><code>haskell-updates</code></a>
branch first and are then periodically merged into <code>master</code>. I started with
<a href="https://github.com/NixOS/nixpkgs/commit/64c6086db4a6c19bb9960baf165c867c1774ab3d">this
commit</a>
but it had issues with building <code>alex</code> that I sent pull requests for <a href="https://github.com/NixOS/nixpkgs/pull/120535">to
Nixpkgs</a> and <a href="https://github.com/simonmar/alex/pull/185">to the
project</a>. In the meantime it’s very
easy to make any required changes to a fork or a local copy of Nixpkgs. I start
by copying <code>release.nix</code> from the IHaskell project root and changing the
reference to Nixpkgs:</p>
<details>
<summary style="cursor: pointer">
Changing Nixpkgs
</summary>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">nixpkgs-src</span> <span class="op">=</span> <span class="bu">builtins</span>.<span class="bu">fetchTarball</span> <span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/NixOS/nixpkgs/tarball/8795d39ce70f04e3fd609422d522e5b2594f3a70&quot;</span><span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;01w7q0nqydippj0ygbg77byb770snhc5rnqzc6isws58642l8z4s&quot;</span><span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">compiler</span> <span class="op">?</span> <span class="st">&quot;ghc901&quot;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">jupyterlabAppDir</span> <span class="op">?</span> <span class="cn">null</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">nixpkgs</span> <span class="op">?</span> <span class="bu">import</span> nixpkgs<span class="op">-</span>src <span class="op">{}</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">packages</span> <span class="op">?</span> <span class="op">(</span><span class="va">_</span><span class="op">:</span> <span class="op">[])</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">pythonPackages</span> <span class="op">?</span> <span class="op">(</span><span class="va">_</span><span class="op">:</span> <span class="op">[])</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">rtsopts</span> <span class="op">?</span> <span class="st">&quot;-M3g -N2&quot;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">systemPackages</span> <span class="op">?</span> <span class="op">(</span><span class="va">_</span><span class="op">:</span> <span class="op">[])</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span></code></pre></div>
</details>
<p>Then it’s possible to build this and see how many packages need changes:</p>
<pre class="shell"><code>$ nix-build release-9.0.nix --keep-going 2&gt;&amp;1 | wc -l</code></pre>
<p>Fixing the affected packages might involve patching, jailbreaking it so that
its dependency bounds are relaxed, using a newer version that is not included
in the package set by default, or any number of other changes. Here’s what I ended up with this time:</p>
<details>
<summary style="cursor: pointer">
Package set overrides
</summary>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>      cryptohash<span class="op">-</span>md5    = nixpkgs.haskell.lib.doJailbreak super.cryptohash<span class="op">-</span>md5;</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>      cryptohash<span class="op">-</span>sha1   = nixpkgs.haskell.lib.doJailbreak super.cryptohash<span class="op">-</span>sha1;</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>      basement          = super.basement_0_0_12;</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>      foundation        = super.foundation_0_0_26_1;</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>      memory            = nixpkgs.haskell.lib.appendPatch super.memory <span class="op">(</span>nixpkgs.fetchpatch <span class="op">{</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://gitlab.haskell.org/ghc/head.hackage/-/raw/c89c1e27af8f180b3be476e102147557f922b224/patches/memory-0.15.0.patch&quot;</span><span class="op">;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;0mkjbrzi05h1xds8rf5wfky176hrl03q0d7ipklp9x4ls3yyqj5x&quot;</span><span class="op">;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      <span class="op">})</span>;</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>      cryptonite        = nixpkgs.haskell.lib.appendPatch super.cryptonite <span class="op">(</span>nixpkgs.fetchpatch <span class="op">{</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://gitlab.haskell.org/ghc/head.hackage/-/raw/6a65307bbdc73c5eb4165a67ee97c7b9faa818e1/patches/cryptonite-0.28.patch&quot;</span><span class="op">;</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;1wq9hw16qj2yqy7lyqbi7106lhk199hvnkj5xr7h0ip854gjsr5j&quot;</span><span class="op">;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>      <span class="op">})</span>;</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>      profunctors       = self.callCabal2nix <span class="st">&quot;profunctors&quot;</span> profunctors<span class="op">-</span>src <span class="op">{}</span>; <span class="co"># `profunctors-src` is defined above</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>      mono<span class="op">-</span>traversable  = nixpkgs.haskell.lib.dontCheck super.mono<span class="op">-</span>traversable;</span></code></pre></div>
</details>
<p>After every few changes, I like to rerun <code>nix-build</code> and watch the number go
down. It’s also possible to build an individual package, e.g. to build
<code>foundation</code> (and any dependencies) one would run</p>
<pre class="shell"><code>$ nix-build release-9.0.nix -A passthru.haskellPackages.foundation</code></pre>
<p><a href="https://github.com/gibiansky/IHaskell/pull/1215/commits/12f50f34d9cf6dceb3ca5adc9fa450cee6e7dcee">This is what the final <code>release-9.0.nix</code> looked
like</a>.</p>
<p>Eventually only <code>ghc-parser</code>, maybe <code>ipython-kernel</code>, and <code>ihaskell</code> should fail to
build.</p>
<h2 id="updating-ghc-parser">Updating <code>ghc-parser</code></h2>
<p><code>ghc-parser</code> has the fewest dependencies of the three packages we are changing
so it makes sense to start there. I’m relatively low-tech as far as development
workflow goes and I prefer <code>ghcid</code> and a text editor, mostly because I haven’t
yet figured out how to get anything more advanced to work. To get <code>ghcid</code>
running, assuming you have it installed globally like I do, you relax the
version bounds in <code>ghc-parser.cabal</code> and run</p>
<pre class="shell"><code>$ nix-shell release-9.0.nix -A passthru.haskellPackages.ghc-parser.env
$ cd ghc-parser
$ runhaskell Setup.hs configure
$ ghcid -c runhaskell Setup.hs repl lib:ghc-parser</code></pre>
<p>Most of the compilation errors are related to <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/13009">this GHC module
restructuring</a> that started
in GHC 8.10 and continued in GHC 9.0. If I had kept better notes from last time
I would have looked at
<a href="https://github.com/hsyl20/ghc-api-compat/"><code>ghc-api-compat</code></a> which offers
a compatibility shim and whose
<a href="https://github.com/hsyl20/ghc-api-compat/blob/master/ghc-api-compat.cabal"><code>.cabal</code></a>
file makes translating between old and new module names very easy. Instead
I ended up looking at the <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/libraries/ghc-9.0.1/index.html">GHC 9.0 API
Haddocks</a>
and the <a href="https://hackage.haskell.org/package/ghc-8.10.2">GHC 8.10 API
Haddocks</a>. As an aside, I am
irritated that the most recently released GHC API documentation isn’t available
on Hackage. I also like to have a local checkout of the GHC source so that
I can look at the code across different commits if required.</p>
<p><a href="https://github.com/gibiansky/IHaskell/pull/1215/commits/063e6bb0459b7ff8d9a2e92090332bf7a1e92a63">These are the changes I needed to make to
<code>ghc-parser</code></a>.</p>
<h2 id="updating-ipython-kernel">Updating <code>ipython-kernel</code></h2>
<p><code>ipython-kernel</code> doesn’t depend on the GHC API directly, so changes to it are
usually related to breaking API changes in other dependencies. In this case, no
changes were required!</p>
<h2 id="updating-ihaskell">Updating <code>ihaskell</code></h2>
<p>This is usually the most involved package to update, as its operation is
intimately tied with the details of the GHC API. Most of the changes required
were for three reasons:</p>
<ol type="1">
<li><p>The aforementioned module hierarchy change</p></li>
<li><p>Changing the terminology from
“packages” to “units” as described in <a href="https://gitlab.haskell.org/ghc/ghc/-/commit/10a2ba90aa6a788677104cc43318c66f46e2e2b0">this
commit</a></p></li>
<li><p>Removing specialised <code>gcatch</code>, <code>gtry</code>, etc. functions in favour of the more
general versions in <code>exceptions</code>, as detailed in <a href="https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/9.0.1-notes.html#ghc-library">this section of the release
notes</a></p></li>
</ol>
<p>As before, it’s possible to get <code>ghcid</code> running with</p>
<pre class="shell"><code>$ nix-shell release-9.0.nix -A passthru.haskellPackages.ghc-parser.env
$ runhaskell Setup.hs configure --enable-tests
$ ghcid -c runhaskell Setup.hs repl lib:ihaskell</code></pre>
<p>After getting everything compiling, I like to build the <code>ihaskell</code> package by
running</p>
<pre class="shell"><code>$ nix-build release-9.0.nix -A passthru.haskellPackages.ihaskell</code></pre>
<p>because this sets up the test environment correctly (i.e. putting the built
<code>ihaskell</code> executable in the <code>$PATH</code>) before running tests, although course you
could do this manually. This usually catches any issues that have slipped
through and <a href="https://github.com/gibiansky/IHaskell/pull/1215/commits/1796c35119ced7a564e75fe07067797fb182149d#diff-409dc396158ef9f7f39928cb144c6c3037072f0d9932499d2213862e0f5fbae6">small formatting changes in GHC output across
versions</a>.</p>
<p><a href="https://github.com/gibiansky/IHaskell/pull/1215/commits/1796c35119ced7a564e75fe07067797fb182149d">Here are the changes I made to
<code>ihaskell</code></a>.</p>
<h2 id="acceptance-testing">Acceptance testing</h2>
<p>Since IHaskell bridges the Jupyter and GHC ecosystems, we have an acceptance
test that essentially runs an IHaskell notebook through
<a href="https://nbconvert.readthedocs.io/en/latest/"><code>nbconvert</code></a> and ensures that the
output is identical to the input. Because GHC output (amongst other things)
differs across GHC versions, this acceptance test was frequently broken and/or
a bad indicator of whether any changes were correct. Recently <a href="https://github.com/jamesdbrock">James
Brock</a> simplified and greatly improved the
acceptance test to be more reliable. Unfortunately the latest releases of
Jupyter now include additional metadata with each response including the time
of reply, which cannot be expected to be the same across runs. In the past it’s
been possible to filter the offending fields out using <code>grep -e</code> but a more
sophisticated approach was required this time so I took the opportunity to
learn a little more about <a href="https://stedolan.github.io/jq/"><code>jq</code></a> and used that
instead. This new approach should also be more flexible and better at
accommodating future output changes.</p>
<p><a href="https://github.com/gibiansky/IHaskell/pull/1215/commits/4b62c964fb8937353d39a8798dc13d06260c9257">Here are the changes I made to the acceptance
tests</a>.</p>
<h2 id="using-the-updated-ihaskell">Using the updated IHaskell</h2>
<p>We’re done! I like to quickly try out a new notebook, as a quick test that
everything works as expected (and also for the novelty of being the first
person to try IHaskell on the newest GHC). To do this, I run</p>
<pre class="shell"><code>$ nix-build release-9.0.nix
$ result/bin/jupyter-notebook</code></pre>
</summary>
</entry>
<entry>
    <title>Writing GitHub Secrets to a Repository You Don't Own</title>
    <link href="https://vaibhavsagar.com/blog/2020/05/04/github-secrets-api/" />
    <id>https://vaibhavsagar.com/blog/2020/05/04/github-secrets-api/index.html</id>
    <published>2020-05-04</published>
    <updated>2020-05-04T00:00:00Z</updated>
    <summary type="html"><div class="info">
    Posted on  4 May 2020
    
</div>
<div class="info">
    
        Tags: <a title="All pages tagged &#39;ci&#39;." href="/blog/tags/ci/index.html">ci</a>, <a title="All pages tagged &#39;programming&#39;." href="/blog/tags/programming/index.html">programming</a>
    
</div>

<p>I’ve been having a lot of fun migrating the CI systems of my repositories to
use GitHub Actions, but it’s been more difficult to do the same with projects
that are owned by someone else because I don’t have access to the repository
settings that would allow me to create secrets. This means that I can build and
test those projects but not e.g. upload a Docker container as part of
a successful build or upload artifacts somewhere else.</p>
<p>I’ve tried to work around this limitation by creating a separate repository
that I own and using the <code>cron</code> functionality to do this on a schedule, but
this is a poor substitute. I’ve been frustrated by this situation for a while,
and while reading the
<a href="https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets">documentation</a>
I noticed this interesting snippet:</p>
<blockquote>
<p>If you are using the REST API to create secrets, anyone with write access to
the repository can create secrets. For more information, see <a href="https://developer.github.com/v3/actions/secrets/#create-or-update-a-secret-for-a-repository">“GitHub Actions
secrets
API”</a>
in the GitHub Developer documentation.</p>
</blockquote>
<p>Amazing! This makes it sound like it’s purely a UI issue. So emboldened, I was
able to create and use my secrets only a couple of hours later by poking at the
GitHub API.</p>
<p>I’m going to go ahead and write down the steps I took in order to make this
happen, because this seems like the kind of thing I might have to do more than
once and it’s just fiddly enough that I will quickly forget if I don’t.</p>
<p>The first thing I need is a GitHub Personal Access Token with the <code>repo</code> scope,
which I can create from <a href="https://github.com/settings/tokens">this page</a>.</p>
<p>The next thing to do is to retrieve the public key for the relevant repository:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> curl <span class="at">-H</span> <span class="st">&quot;Authorization: token </span><span class="va">$TOKEN</span><span class="st">&quot;</span> https://api.github.com/repos/gibiansky/IHaskell/actions/secrets/public-key</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;key_id&quot;</span><span class="ex">:</span> <span class="st">&quot;</span><span class="va">$KEY_ID</span><span class="st">&quot;</span>,</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;key&quot;</span><span class="ex">:</span> <span class="st">&quot;</span><span class="va">$PUBLIC_KEY</span><span class="st">&quot;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span></code></pre></div>
<p>Then I can see what secrets are available:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> curl <span class="at">-H</span> <span class="st">&quot;Authorization: token </span><span class="va">$TOKEN</span><span class="st">&quot;</span> https://api.github.com/repos/gibiansky/IHaskell/actions/secrets</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">{</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;total_count&quot;</span><span class="ex">:</span> 0,</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;secrets&quot;</span><span class="ex">:</span> [</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="ex">]</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span></code></pre></div>
<p>The secrets need to be encrypted, and there is sample code for doing this in
Python:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> base64 <span class="im">import</span> b64encode</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> nacl <span class="im">import</span> encoding, public</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> encrypt(public_key: <span class="bu">str</span>, secret_value: <span class="bu">str</span>) <span class="op">-&gt;</span> <span class="bu">str</span>:</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;Encrypt a Unicode string using the public key.&quot;&quot;&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    public_key <span class="op">=</span> public.PublicKey(public_key.encode(<span class="st">&quot;utf-8&quot;</span>), encoding.Base64Encoder())</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    sealed_box <span class="op">=</span> public.SealedBox(public_key)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    encrypted <span class="op">=</span> sealed_box.encrypt(secret_value.encode(<span class="st">&quot;utf-8&quot;</span>))</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> b64encode(encrypted).decode(<span class="st">&quot;utf-8&quot;</span>)</span></code></pre></div>
<p>I added a Nix shebang line and decided to generate all the encrypted secrets
I needed:</p>
<p><em>secret.py</em></p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">#! /usr/bin/env nix-shell</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co">#! nix-shell -i python</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co">#! nix-shell -p &quot;python3.withPackages (p: [ p.pynacl ])&quot;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> base64 <span class="im">import</span> b64encode</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> nacl <span class="im">import</span> encoding, public</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> encrypt(public_key: <span class="bu">str</span>, secret_value: <span class="bu">str</span>) <span class="op">-&gt;</span> <span class="bu">str</span>:</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;Encrypt a Unicode string using the public key.&quot;&quot;&quot;</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    public_key <span class="op">=</span> public.PublicKey(public_key.encode(<span class="st">&quot;utf-8&quot;</span>), encoding.Base64Encoder())</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    sealed_box <span class="op">=</span> public.SealedBox(public_key)</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    encrypted <span class="op">=</span> sealed_box.encrypt(secret_value.encode(<span class="st">&quot;utf-8&quot;</span>))</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> b64encode(encrypted).decode(<span class="st">&quot;utf-8&quot;</span>)</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>public_key <span class="op">=</span> <span class="st">&quot;$PUBLIC_KEY&quot;</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;CACHIX_SIGNING_KEY=&quot;</span>, encrypt(public_key, <span class="st">&quot;$CACHIX_SIGNING_KEY&quot;</span>))</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;DOCKER_USERNAME=&quot;</span>, encrypt(public_key, <span class="st">&#39;$DOCKER_USERNAME&#39;</span>))</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;DOCKER_PASSWORD=&quot;</span>, encrypt(public_key, <span class="st">&#39;$DOCKER_PASSWORD&#39;</span>))</span></code></pre></div>
<p>This was easy to run:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> chmod +x secret.py</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ./secret.py</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="va">CACHIX_SIGNING_KEY</span><span class="op">=</span> <span class="va">$ENCRYPTED_CACHIX_SIGNING_KEY</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="va">DOCKER_USERNAME</span><span class="op">=</span> <span class="va">$ENCRYPTED_DOCKER_USERNAME</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="va">DOCKER_PASSWORD</span><span class="op">=</span> <span class="va">$ENCRYPTED_DOCKER_PASSWORD</span></span></code></pre></div>
<p>And I chose to update the secrets manually with <code>curl</code> even though I could have
automated it with <code>requests</code> or something similar (which I might if I have to
do this again soon), for example:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> curl <span class="at">-X</span> PUT <span class="at">-H</span> <span class="st">&quot;Authorization: token </span><span class="va">$TOKEN</span><span class="st">&quot;</span> <span class="at">-H</span> <span class="st">&quot;Content-Type: application/json&quot;</span> <span class="at">-i</span> https://api.github.com/repos/gibiansky/IHaskell/actions/secrets/CACHIX_SIGNING_KEY <span class="at">-d</span> <span class="st">&#39;{&quot;key_id&quot;: &quot;$KEY_ID&quot;, &quot;encrypted_value&quot;: &quot;$ENCRYPTED_CACHIX_SIGNING_KEY&quot;}&#39;</span></span></code></pre></div>
<p>Finally I can check that the secrets were created correctly:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> curl <span class="at">-H</span> <span class="st">&quot;Authorization: token </span><span class="va">$TOKEN</span><span class="st">&quot;</span> https://api.github.com/repos/gibiansky/IHaskell/actions/secrets</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">{</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;total_count&quot;</span><span class="ex">:</span> 3,</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;secrets&quot;</span><span class="ex">:</span> [</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">{</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;name&quot;</span><span class="ex">:</span> <span class="st">&quot;CACHIX_SIGNING_KEY&quot;</span>,</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;created_at&quot;</span><span class="ex">:</span> <span class="st">&quot;2020-05-03T04:45:07Z&quot;</span>,</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;updated_at&quot;</span><span class="ex">:</span> <span class="st">&quot;2020-05-03T04:45:07Z&quot;</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    <span class="ex">},</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">{</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;name&quot;</span><span class="ex">:</span> <span class="st">&quot;DOCKER_PASSWORD&quot;</span>,</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;created_at&quot;</span><span class="ex">:</span> <span class="st">&quot;2020-05-03T04:49:59Z&quot;</span>,</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;updated_at&quot;</span><span class="ex">:</span> <span class="st">&quot;2020-05-03T04:49:59Z&quot;</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>    <span class="ex">},</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">{</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;name&quot;</span><span class="ex">:</span> <span class="st">&quot;DOCKER_USERNAME&quot;</span>,</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;created_at&quot;</span><span class="ex">:</span> <span class="st">&quot;2020-05-03T04:48:52Z&quot;</span>,</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;updated_at&quot;</span><span class="ex">:</span> <span class="st">&quot;2020-05-03T04:48:52Z&quot;</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">}</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>  <span class="ex">]</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span></code></pre></div>
<p>I hope these instructions are useful, future me!</p>
</summary>
</entry>
<entry>
    <title>Getting Along with JavaScript</title>
    <link href="https://vaibhavsagar.com/blog/2019/10/29/getting-along-with-javascript/" />
    <id>https://vaibhavsagar.com/blog/2019/10/29/getting-along-with-javascript/index.html</id>
    <published>2019-10-29</published>
    <updated>2019-10-29T00:00:00Z</updated>
    <summary type="html"><div class="info">
    Posted on 29 October 2019
    
</div>
<div class="info">
    
        Tags: <a title="All pages tagged &#39;programming&#39;." href="/blog/tags/programming/index.html">programming</a>, <a title="All pages tagged &#39;haskell&#39;." href="/blog/tags/haskell/index.html">haskell</a>, <a title="All pages tagged &#39;nix&#39;." href="/blog/tags/nix/index.html">nix</a>
    
</div>

<p>For the last couple of weeks, I’ve been obsessed with the idea of running
Haskell in the browser. I know this is possible, because this is what I do at
work every day, but the applications I work on professionally are complex
beasts with Haskell backends and dedicated servers making them available to
users. I’m looking for something lighter that I can serve statically using
GitHub Pages or <a href="https://glitch.com">Glitch</a>, so I can plop some code on a
webpage and never worry about hosting ever again.</p>
<p>My first instinct was to reach for a tool like
<a href="https://github.com/obsidiansystems/obelisk">Obelisk</a>, which bills itself as
“an easy way to develop and deploy your Reflex project”. Although it does work
as advertised(!), it is geared towards the needs of the large apps I mentioned
above. It prerenders webpages where possible to make projects as snappy as
possible, works best within the confines of the Obelisk libraries, and assumes
at least one NixOS target that will host your website, all of which mean it
doesn’t yet scale down to my comparatively modest needs. It is possible to use
Obelisk anyway, but I found myself using too few of its features to justify the
effort, and I decided to move down a level and use <a href="https://github.com/reflex-frp/reflex-platform">Reflex
Platform</a> directly, which is a
set of changes and overrides to a revision of
<a href="https://github.com/NixOS/nixpkgs">Nixpkgs</a> to best support building full-stack
and mobile Haskell applications.</p>
<p>If you’d like to follow along, I have the code available <a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8">at this
gist</a>
with <a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/revisions">each
revision</a>
representing a step in the progression.</p>
<h3 id="setting-up-reflex-platform">Setting up reflex-platform</h3>
<p>I like to use the <code>updater</code> script described in <a href="/blog/2018/05/27/quick-easy-nixpkgs-pinning">a previous blog
post</a>, so I’ll start by copying that over and
creating a <code>versions.json</code> with the following contents:</p>
<details>
<summary style="cursor: pointer">
<code>versions.json</code>
</summary>
<div class="sourceCode" id="cb1"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;reflex-platform&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;owner&quot;</span><span class="fu">:</span> <span class="st">&quot;reflex-frp&quot;</span><span class="fu">,</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;repo&quot;</span><span class="fu">:</span> <span class="st">&quot;reflex-platform&quot;</span><span class="fu">,</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;branch&quot;</span><span class="fu">:</span> <span class="st">&quot;develop&quot;</span><span class="fu">,</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;rev&quot;</span><span class="fu">:</span> <span class="st">&quot;&quot;</span><span class="fu">,</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;sha256&quot;</span><span class="fu">:</span> <span class="st">&quot;&quot;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
</details>
<p>I can then update this by running:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ./updater versions.json reflex-platform</span></code></pre></div>
<p>to get the latest <code>reflex-platform</code>. At the time of writing, this is the
revision I used:</p>
<details>
<summary style="cursor: pointer">
pinned <code>versions.json</code>
</summary>
<div class="sourceCode" id="cb3"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;reflex-platform&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;owner&quot;</span><span class="fu">:</span> <span class="st">&quot;reflex-frp&quot;</span><span class="fu">,</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;repo&quot;</span><span class="fu">:</span> <span class="st">&quot;reflex-platform&quot;</span><span class="fu">,</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;branch&quot;</span><span class="fu">:</span> <span class="st">&quot;develop&quot;</span><span class="fu">,</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;rev&quot;</span><span class="fu">:</span> <span class="st">&quot;8f4b8973a06f78c7aaf1a222f8f8443cd934569f&quot;</span><span class="fu">,</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;sha256&quot;</span><span class="fu">:</span> <span class="st">&quot;167smg7dyvg5yf1wn9bx6yxvazlk0qk64rzgm2kfzn9mx873s0vp&quot;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
</details>
<p><em>(<a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/c21e62ecdcc053273ee5e4815ef538e1e8a29e55#file-versions-json">revision</a>)</em></p>
<h3 id="creating-a-project-skeleton">Creating a project skeleton</h3>
<p>The next step is to get a Haskell project skeleton in place. I used <code>cabal init</code> for this as follows:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">-p</span> ghc cabal-install <span class="at">--run</span> <span class="st">&#39;cabal init -lBSD3&#39;</span></span></code></pre></div>
<p><em>(<a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/d4c4f9ff39b595f5c8858892328adfa6ab4a4cc8#file-small-viz-cabal">revision</a>)</em></p>
<p>which generated an executable-only project, just like I wanted. I named this
project <code>small-viz</code>, because it’s a small project using the
<a href="http://viz-js.com/">Viz.js</a> library, but more on that later.</p>
<p>The next step is to actually use <code>reflex-platform</code> to develop this project, for
which we need to write a little Nix. Here’s the <code>default.nix</code> I used:</p>
<details>
<summary style="cursor: pointer">
<code>default.nix</code>
</summary>
<div class="sourceCode" id="cb5"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ./updater versions.json reflex-platform</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">fetcher</span> <span class="op">=</span> <span class="op">{</span> <span class="va">owner</span><span class="op">,</span> <span class="va">repo</span><span class="op">,</span> <span class="va">rev</span><span class="op">,</span> <span class="va">sha256</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>: <span class="bu">builtins</span>.<span class="bu">fetchTarball</span> <span class="op">{</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">inherit</span> sha256<span class="op">;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/</span><span class="sc">${</span>owner<span class="sc">}</span><span class="st">/</span><span class="sc">${</span>repo<span class="sc">}</span><span class="st">/tarball/</span><span class="sc">${</span>rev<span class="sc">}</span><span class="st">&quot;</span><span class="op">;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">reflex-platform</span> <span class="op">=</span> fetcher <span class="op">(</span><span class="bu">builtins</span>.fromJSON <span class="op">(</span><span class="bu">builtins</span>.readFile <span class="ss">./versions.json</span><span class="op">))</span>.reflex<span class="op">-</span>platform<span class="op">;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span> <span class="op">(</span><span class="bu">import</span> reflex<span class="op">-</span>platform <span class="op">{</span> <span class="va">system</span> <span class="op">=</span> <span class="bu">builtins</span>.currentSystem<span class="op">;</span> <span class="op">})</span>.project <span class="op">({</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>: <span class="op">{</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">useWarp</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>  <span class="va">withHoogle</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">packages</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="va">small-viz</span> <span class="op">=</span> <span class="ss">./.</span><span class="op">;</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>  <span class="va">shells</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    <span class="va">ghc</span> <span class="op">=</span> <span class="op">[</span><span class="st">&quot;small-viz&quot;</span><span class="op">];</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">ghcjs</span> <span class="op">=</span> <span class="op">[</span><span class="st">&quot;small-viz&quot;</span><span class="op">];</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="op">})</span></span></code></pre></div>
</details>
<p><em>(<a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/348b759019bc19aec9833a6b5f042c1d2f5e9b13#file-default-nix">revision</a>)</em></p>
<p>This sets up our project to build with both GHC and GHCJS, because we want to
develop with GHC but eventually use GHCJS to create our final artifact. I also
set a few more options:</p>
<ol type="1">
<li><p><code>useWarp = true</code> changes the JSaddle backend to <code>jsaddle-warp</code> so we can
develop using the browser, as described
<a href="https://github.com/reflex-frp/reflex-platform/blob/8f4b8973a06f78c7aaf1a222f8f8443cd934569f/docs/project-development.md#building-frontends-with-ghc">here</a>.</p></li>
<li><p><code>withHoogle = false</code> means we don’t build a local Hoogle database every time
our packages are updated, because this step is slow and I never used the
local documentation anyway.</p></li>
</ol>
<p>For the next step I’ll assume binary cache substitution has been set up as
described
<a href="https://github.com/reflex-frp/reflex-platform/blob/develop/notes/NixOS.md#enabling-the-binary-cache-on-nixos">here</a>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">-A</span> shells.ghc</span></code></pre></div>
<p>This should download a lot (and build almost nothing from source since we are
pulling from the cache), and then enter a shell environment with our
dependencies in scope.</p>
<h3 id="starting-our-reflex-app">Starting our Reflex app</h3>
<p>Now we can start developing our Reflex app! We can start from the small example
described
<a href="https://github.com/reflex-frp/reflex-platform/tree/8f4b8973a06f78c7aaf1a222f8f8443cd934569f#dynamics-and-events">here</a>:</p>
<details>
<summary style="cursor: pointer">
<code>Main.hs</code>
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="pp">{-# LANGUAGE OverloadedStrings #-}</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Reflex.Dom</span><span>

</span><span class="va">main</span><span> </span><span class="ot">=</span><span> </span><span class="va">mainWidget</span><span> </span><span class="op">$</span><span> </span><span class="va">el</span><span> </span><span class="st">&quot;div&quot;</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
  </span><span class="va">t</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">inputElement</span><span> </span><span class="va">def</span><span>
  </span><span class="va">dynText</span><span> </span><span class="op">$</span><span> </span><span class="va">_inputElement_value</span><span> </span><span class="va">t</span></code></pre></div>
</details>
<p><em>(<a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/93c510d77f7a8d6b1d8d63bb1cb0be37c6d575b5#file-main-hs">revision</a>)</em></p>
<p>We also have to add <code>reflex-dom</code> and <code>reflex</code> to our dependencies in our
<code>.cabal</code> file, and then we can get a automatically-reloading development build
with one command:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">-A</span> shells.ghc <span class="at">--run</span> <span class="st">&#39;ghcid -T &quot;Main.main&quot; --command &quot;cabal new-repl&quot;&#39;</span></span></code></pre></div>
<p>This allows a native Haskell process to control a web page, so we can navigate
to it using our browser at <code>http://localhost:3003</code> and have a fast feedback
loop. In practice there is a lot of browser refreshing involved, but this is
still much nicer than having to do a GHCJS build each time we want to look at
our changes. Now we have an input box that repeats what we type into it, which
is a good start. I should point out that this works a lot better on Google
Chrome (or Chromium) than it does on Firefox, and that’s what I’ll be using for
development. The final GHCJS output does not have this limitation.</p>
<p>So where are we going with this? My plan is to build a crude version of the
<a href="http://viz-js.com">Viz.js</a> homepage, where you can write
<a href="https://en.wikipedia.org/wiki/DOT_(graph_description_language)">DOT</a> and see
it rendered instantly. Viz.js is the result of compiling the venerable
<a href="http://graphviz.org/">Graphviz</a> to JavaScript using
<a href="https://emscripten.org">Emscripten</a>. It’s no longer maintained but still works
fine as far as I can tell. In order to do this I want to use some kind of
JavaScript FFI to call out to <code>viz.js</code>, but first I want to swap out our text
input for a text area, and move the repeated output to just below the text area
instead of beside it.</p>
<details>
<summary style="cursor: pointer">
<code>Main.hs</code>
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="pp">{-# LANGUAGE OverloadedStrings #-}</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Reflex.Dom</span><span>

</span><span class="va">main</span><span> </span><span class="ot">=</span><span> </span><span class="va">mainWidget</span><span> </span><span class="op">$</span><span> </span><span class="va">el</span><span> </span><span class="st">&quot;div&quot;</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
  </span><span class="va">t</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">textArea</span><span> </span><span class="va">def</span><span>
  </span><span class="va">el</span><span> </span><span class="st">&quot;div&quot;</span><span> </span><span class="op">$</span><span>
    </span><span class="va">dynText</span><span> </span><span class="op">$</span><span> </span><span class="va">_textArea_value</span><span> </span><span class="va">t</span></code></pre></div>
</details>
<p><em>(<a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/d5ff4725b26db3dd596abb2e751711f5c568b6bc#file-main-hs">revision</a>)</em></p>
<h3 id="integrating-with-viz.js">Integrating with Viz.js</h3>
<p>The latest version of Viz.js is available
<a href="https://www.jsdelivr.com/package/npm/viz.js">here</a>, and we can include it
using <code>mainWidgetWithHead</code>:</p>
<details>
<summary style="cursor: pointer">
<code>Main.hs</code>
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="pp">{-# LANGUAGE OverloadedStrings #-}</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Reflex.Dom</span><span>

</span><span class="va">main</span><span> </span><span class="ot">=</span><span> </span><span class="va">mainWidgetWithHead</span><span> </span><span class="va">widgetHead</span><span> </span><span class="op">$</span><span> </span><span class="va">el</span><span> </span><span class="st">&quot;div&quot;</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
  </span><span class="va">t</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">textArea</span><span> </span><span class="va">def</span><span>
  </span><span class="va">el</span><span> </span><span class="st">&quot;div&quot;</span><span> </span><span class="op">$</span><span>
    </span><span class="va">dynText</span><span> </span><span class="op">$</span><span> </span><span class="va">_textArea_value</span><span> </span><span class="va">t</span><span>
  </span><span class="kw">where</span><span>
    </span><span class="va">widgetHead</span><span> </span><span class="ot">::</span><span> </span><span class="dt">DomBuilder</span><span> </span><span class="va">t</span><span> </span><span class="va">m</span><span> </span><span class="ot">=&gt;</span><span> </span><span class="va">m</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
    </span><span class="va">widgetHead</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
      </span><span class="va">script</span><span> </span><span class="st">&quot;https://cdn.jsdelivr.net/npm/viz.js@2.1.2/viz.min.js&quot;</span><span>
      </span><span class="va">script</span><span> </span><span class="st">&quot;https://cdn.jsdelivr.net/npm/viz.js@2.1.2/full.render.min.js&quot;</span><span>
    </span><span class="va">script</span><span> </span><span class="va">src</span><span> </span><span class="ot">=</span><span> </span><span class="va">elAttr</span><span> </span><span class="st">&quot;script&quot;</span><span> </span><span class="ot">(</span><span class="st">&quot;type&quot;</span><span> </span><span class="op">=:</span><span> </span><span class="st">&quot;text/javascript&quot;</span><span> </span><span class="op">&lt;&gt;</span><span> </span><span class="st">&quot;src&quot;</span><span> </span><span class="op">=:</span><span> </span><span class="va">src</span><span class="ot">)</span><span> </span><span class="va">blank</span></code></pre></div>
</details>
<p><em>(<a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/6a856c34755f730793f3b588a82f0fc9f836bf9c#file-main-hs">revision</a>)</em></p>
<p>Now we can poke around with our browser developer tools until we have a useful
JavaScript function. Here’s what I came up with, based on the examples in the
<a href="https://github.com/mdaines/viz.js/wiki/Usage#using-a-script-tag">wiki</a>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span>(e<span class="op">,</span> string) {</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">var</span> viz <span class="op">=</span> <span class="kw">new</span> <span class="fu">Viz</span>()<span class="op">;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  viz<span class="op">.</span><span class="fu">renderSVGElement</span>(string)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(element) {</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    e<span class="op">.</span><span class="at">innerHTML</span> <span class="op">=</span> element<span class="op">.</span><span class="at">outerHTML</span><span class="op">;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  })</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">catch</span>(<span class="kw">function</span>(error) {</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    e<span class="op">.</span><span class="at">innerHTML</span> <span class="op">=</span> error<span class="op">;</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>  })</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Then we can start thinking about how we want to do JavaScript interop! Although
there is a GHCJS FFI as described <a href="https://github.com/ghcjs/ghcjs/wiki/A-few-examples-of-Foreign-Function-Interface">in the
wiki</a>,
this doesn’t seem to work at all with GHC, and that means we can’t use it
during development. I don’t think that’s good enough, and fortunately we don’t
have to settle for this and instead can use
<a href="http://hackage.haskell.org/package/jsaddle-0.9.6.0"><code>jsaddle</code></a>, which
describes itself as “an EDSL for calling JavaScript that can be used both from
GHCJS and GHC”. We can add <code>jsaddle</code> to our dependencies, add <code>Viz</code> to the
<code>exposed-modules</code> stanza in our <code>.cabal</code> file, and create a new module <code>Viz</code>,
and then we can use the <code>eval</code> and <code>call</code> functions to call our JavaScript
directly:</p>
<details>
<summary style="cursor: pointer">
<code>Viz.hs</code>
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span><span> </span><span class="dt">Viz</span><span> </span><span class="kw">where</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Language.Javascript.JSaddle</span><span>

</span><span class="va">viz</span><span> </span><span class="ot">::</span><span> </span><span class="dt">JSVal</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">JSVal</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">JSM</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">viz</span><span> </span><span class="va">element</span><span> </span><span class="va">string</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
  </span><span class="va">call</span><span> </span><span class="va">vizJs</span><span> </span><span class="va">vizJs</span><span> </span><span class="ot">[</span><span class="va">element</span><span class="ot">,</span><span> </span><span class="va">string</span><span class="ot">]</span><span>
  </span><span class="va">pure</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>

</span><span class="va">vizJs</span><span> </span><span class="ot">::</span><span> </span><span class="dt">JSM</span><span> </span><span class="dt">JSVal</span><span>
</span><span class="va">vizJs</span><span> </span><span class="ot">=</span><span> </span><span class="va">eval</span><span>
  </span><span class="st">&quot;(function(e, string) { \
  \  var viz = new Viz(); \
  \  viz.renderSVGElement(string) \
  \  .then(function(element) { \
  \    e.innerHTML = element.outerHTML; \
  \  }) \
  \  .catch(function(error) { \
  \    e.innerHTML = error; \
  \  }) \
  \})&quot;</span></code></pre></div>
</details>
<p><em>(<a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/b234b2649022b1b560df1281f053bac30289ce12#file-viz-hs">revision</a>)</em></p>
<p>JSaddle runs operations in <code>JSM</code>, which is similar to <code>IO</code>, and all functions
take values of type <code>JSVal</code> that can be represented as JavaScript values. We
pass <code>vizJs</code> to <code>call</code> twice because the second parameter represents the <code>this</code>
keyword.</p>
<p>Wiring everything up together is just a few more lines of code:</p>
<details>
<summary style="cursor: pointer">
<code>Main.hs</code>
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="pp">{-# LANGUAGE OverloadedStrings #-}</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Reflex.Dom</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Language.Javascript.JSaddle</span><span> </span><span class="ot">(</span><span class="va">liftJSM</span><span class="ot">,</span><span> </span><span class="va">toJSVal</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Viz</span><span> </span><span class="ot">(</span><span class="va">viz</span><span class="ot">)</span><span>

</span><span class="va">main</span><span> </span><span class="ot">=</span><span> </span><span class="va">mainWidgetWithHead</span><span> </span><span class="va">widgetHead</span><span> </span><span class="op">$</span><span> </span><span class="va">el</span><span> </span><span class="st">&quot;div&quot;</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
  </span><span class="va">t</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">textArea</span><span> </span><span class="va">def</span><span>
  </span><span class="va">e</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">_element_raw</span><span> </span><span class="op">.</span><span> </span><span class="va">fst</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">el&#39;</span><span> </span><span class="st">&quot;div&quot;</span><span> </span><span class="va">blank</span><span>
  </span><span class="va">performEvent_</span><span> </span><span class="op">$</span><span> </span><span class="va">ffor</span><span> </span><span class="ot">(</span><span class="va">updated</span><span> </span><span class="ot">(</span><span class="va">_textArea_value</span><span> </span><span class="va">t</span><span class="ot">)</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">text</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">liftJSM</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">jsE</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">toJSVal</span><span> </span><span class="va">e</span><span>
    </span><span class="va">jsT</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">toJSVal</span><span> </span><span class="va">text</span><span>
    </span><span class="va">viz</span><span> </span><span class="va">jsE</span><span> </span><span class="va">jsT</span><span>
  </span><span class="kw">where</span><span>
    </span><span class="va">widgetHead</span><span> </span><span class="ot">::</span><span> </span><span class="dt">DomBuilder</span><span> </span><span class="va">t</span><span> </span><span class="va">m</span><span> </span><span class="ot">=&gt;</span><span> </span><span class="va">m</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
    </span><span class="va">widgetHead</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
      </span><span class="va">script</span><span> </span><span class="st">&quot;https://cdn.jsdelivr.net/npm/viz.js@2.1.2/viz.min.js&quot;</span><span>
      </span><span class="va">script</span><span> </span><span class="st">&quot;https://cdn.jsdelivr.net/npm/viz.js@2.1.2/full.render.min.js&quot;</span><span>
    </span><span class="va">script</span><span> </span><span class="va">src</span><span> </span><span class="ot">=</span><span> </span><span class="va">elAttr</span><span> </span><span class="st">&quot;script&quot;</span><span> </span><span class="ot">(</span><span class="st">&quot;type&quot;</span><span> </span><span class="op">=:</span><span> </span><span class="st">&quot;text/javascript&quot;</span><span> </span><span class="op">&lt;&gt;</span><span> </span><span class="st">&quot;src&quot;</span><span> </span><span class="op">=:</span><span> </span><span class="va">src</span><span class="ot">)</span><span> </span><span class="va">blank</span></code></pre></div>
</details>
<p><em>(<a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/e0e886959e338803f9c4a1a3596f8eb88474424d#file-main-hs">revision</a>)</em></p>
<p>There’s a lot going on here, so I’ll explain in a little more detail.</p>
<p>Instead of an element which displays the textarea contents as they are updated,
we just want a reference to a blank <code>&lt;div&gt;</code>, so we use the
<a href="https://hackage.haskell.org/package/reflex-dom-core-0.5/docs/Reflex-Dom-Widget-Basic.html#v:el-39-"><code>el'</code></a>
function and pull out the raw element.
<a href="http://hackage.haskell.org/package/reflex-0.6.2.4/docs/Reflex-PerformEvent-Class.html#v:performEvent_"><code>performEvent_</code></a>
mediates the interaction between Reflex and side-effecting actions, like our
function that updates the DOM with a rendered graph, so we want to use it to
render a new graph every time the textarea is updated.</p>
<p>An introduction to Reflex is out of scope for this blog post, but it’s worth
mentioning that the textarea value is represented as a
<a href="http://hackage.haskell.org/package/reflex-0.6.2.4/docs/Reflex-Class.html#t:Dynamic"><code>Dynamic</code></a>,
which can change over time and notify consumers when it has changed. This can
be thought of as the combination of a related
<a href="http://hackage.haskell.org/package/reflex-0.6.2.4/docs/Reflex-Class.html#t:Behavior"><code>Behavior</code></a>
and
<a href="http://hackage.haskell.org/package/reflex-0.6.2.4/docs/Reflex-Class.html#t:Event"><code>Event</code></a>.
<code>performEvent_</code> only takes an <code>Event</code>, and we can get the underlying <code>Event</code>
out of a <code>Dynamic</code> with
<a href="http://hackage.haskell.org/package/reflex-0.6.2.4/docs/Reflex-Class.html#v:updated"><code>updated</code></a>.</p>
<p><code>ffor</code> is just <code>flip fmap</code>, and we use it to operate on the underlying <code>Text</code>
value, convert both it and the reference to the element we want to update to
<code>JSVal</code>s, and then pass them as arguments to the <code>viz</code> function we defined
earlier. Now we should have a working GraphViz renderer in our browser!</p>
<h3 id="using-the-ffi-better">Using the FFI better</h3>
<p>We could stop here, but I think we can do better than evaluating JavaScript
strings directly. JSaddle is an EDSL, which means we can rewrite our JavaScript
in Haskell:</p>
<details>
<summary style="cursor: pointer">
<code>Viz.hs</code>
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span><span> </span><span class="dt">Viz</span><span> </span><span class="kw">where</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Language.Javascript.JSaddle</span><span>

</span><span class="va">viz</span><span> </span><span class="ot">::</span><span> </span><span class="dt">JSVal</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">JSVal</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">JSM</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">viz</span><span> </span><span class="va">element</span><span> </span><span class="va">string</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
  </span><span class="va">viz</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">new</span><span> </span><span class="ot">(</span><span class="va">jsg</span><span> </span><span class="st">&quot;Viz&quot;</span><span class="ot">)</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
  </span><span class="va">render</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">viz</span><span> </span><span class="op">#</span><span> </span><span class="st">&quot;renderSVGElement&quot;</span><span> </span><span class="op">$</span><span> </span><span class="ot">[</span><span class="va">string</span><span class="ot">]</span><span>
  </span><span class="va">result</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">render</span><span> </span><span class="op">#</span><span> </span><span class="st">&quot;then&quot;</span><span> </span><span class="op">$</span><span> </span><span class="ot">[</span><span class="ot">(</span><span class="va">fun</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="ot">_</span><span> </span><span class="ot">_</span><span> </span><span class="ot">[</span><span class="va">e</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">outer</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">e</span><span> </span><span class="op">!</span><span> </span><span class="st">&quot;outerHTML&quot;</span><span>
    </span><span class="va">element</span><span> </span><span class="op">&lt;#</span><span> </span><span class="st">&quot;innerHTML&quot;</span><span> </span><span class="op">$</span><span> </span><span class="va">outer</span><span>
  </span><span class="ot">)</span><span class="ot">]</span><span>
  </span><span class="va">result</span><span> </span><span class="op">#</span><span> </span><span class="st">&quot;catch&quot;</span><span> </span><span class="op">$</span><span> </span><span class="ot">[</span><span class="ot">(</span><span class="va">fun</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="ot">_</span><span> </span><span class="ot">_</span><span> </span><span class="ot">[</span><span class="va">err</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span>
    </span><span class="va">element</span><span> </span><span class="op">&lt;#</span><span> </span><span class="st">&quot;innerHTML&quot;</span><span> </span><span class="op">$</span><span> </span><span class="va">err</span><span>
  </span><span class="ot">)</span><span class="ot">]</span><span>
  </span><span class="va">pure</span><span> </span><span class="ot">(</span><span class="ot">)</span></code></pre></div>
</details>
<p><em>(<a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/96e0dbda1ba9dc5712342bf1b123fe5d463201d0#file-viz-hs">revision</a>)</em></p>
<p>This is recognisably the same logic as before, using some new JSaddle operators:</p>
<ul>
<li><a href="http://hackage.haskell.org/package/jsaddle-0.9.6.0/docs/Language-Javascript-JSaddle.html#v:-35-"><code>#</code></a>
is for calling a JavaScript function</li>
<li><a href="http://hackage.haskell.org/package/jsaddle-0.9.6.0/docs/Language-Javascript-JSaddle.html#v:-33-"><code>!</code></a>
is for property access</li>
<li><a href="http://hackage.haskell.org/package/jsaddle-0.9.6.0/docs/Language-Javascript-JSaddle.html#v:-60--35-"><code>&lt;#</code></a>
is a setter</li>
</ul>
<p>Note also that all callables take a list of <code>JSVal</code>s as arguments, since
JSaddle doesn’t know how many arguments we intend to pass in advance.</p>
<p>This is an improvement, but we can do even better using the lensy API (after
adding <code>lens</code> to our dependencies):</p>
<details>
<summary style="cursor: pointer">
<code>Viz.hs</code>
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span><span> </span><span class="dt">Viz</span><span> </span><span class="kw">where</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Language.Javascript.JSaddle</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Control.Lens</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="op">^.</span><span class="ot">)</span><span class="ot">)</span><span>

</span><span class="va">viz</span><span> </span><span class="ot">::</span><span> </span><span class="dt">JSVal</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">JSVal</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">JSM</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">viz</span><span> </span><span class="va">element</span><span> </span><span class="va">string</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
  </span><span class="va">viz</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">new</span><span> </span><span class="ot">(</span><span class="va">jsg</span><span> </span><span class="st">&quot;Viz&quot;</span><span class="ot">)</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
  </span><span class="va">render</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">viz</span><span> </span><span class="op">^.</span><span> </span><span class="va">js1</span><span> </span><span class="st">&quot;renderSVGElement&quot;</span><span> </span><span class="va">string</span><span>
  </span><span class="va">result</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">render</span><span> </span><span class="op">^.</span><span> </span><span class="va">js1</span><span> </span><span class="st">&quot;then&quot;</span><span> </span><span class="ot">(</span><span class="va">fun</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="ot">_</span><span> </span><span class="ot">_</span><span> </span><span class="ot">[</span><span class="va">e</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">outer</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">e</span><span> </span><span class="op">!</span><span> </span><span class="st">&quot;outerHTML&quot;</span><span>
    </span><span class="va">element</span><span> </span><span class="op">^.</span><span> </span><span class="va">jss</span><span> </span><span class="st">&quot;innerHTML&quot;</span><span> </span><span class="va">outer</span><span class="ot">)</span><span>
  </span><span class="va">result</span><span> </span><span class="op">^.</span><span> </span><span class="va">js1</span><span> </span><span class="st">&quot;catch&quot;</span><span> </span><span class="ot">(</span><span class="va">fun</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="ot">_</span><span> </span><span class="ot">_</span><span> </span><span class="ot">[</span><span class="va">err</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span>
    </span><span class="va">element</span><span> </span><span class="op">^.</span><span> </span><span class="va">jss</span><span> </span><span class="st">&quot;innerHTML&quot;</span><span> </span><span class="va">err</span><span class="ot">)</span><span>
  </span><span class="va">pure</span><span> </span><span class="ot">(</span><span class="ot">)</span></code></pre></div>
</details>
<p><em>(<a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/2ede687d9969666897fb1ca944ed83d239b4386b#file-viz-hs">revision</a>)</em></p>
<p>Again, not much has changed except that we can use convenience functions like
<a href="http://hackage.haskell.org/package/jsaddle-0.9.6.0/docs/Language-Javascript-JSaddle.html#v:js1"><code>js1</code></a>
and
<a href="http://hackage.haskell.org/package/jsaddle-0.9.6.0/docs/Language-Javascript-JSaddle.html#v:jss"><code>jss</code></a>.</p>
<p>I’m told that there is some overhead to using JSaddle which it’s possible to
get rid of by using a library like
<a href="https://hackage.haskell.org/package/ghcjs-dom"><code>ghcjs-dom</code></a>, but I haven’t
explored this approach and I will leave this as an exercise for the reader. If
you learn how to do this, please teach me!</p>
<p>Now we are able to run Haskell on the frontend without having to write any
JavaScript ourselves. The final step is to put this on the internet somewhere!</p>
<h3 id="deploying-our-app">Deploying our app</h3>
<p>Building with GHCJS is straightforward:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-build <span class="at">-A</span> ghcjs.small-viz</span></code></pre></div>
<p>I’m enamoured of the idea of deploying this to <a href="https://glitch.com/">Glitch</a>,
so let’s look into doing that. The <code>index.html</code> created by the default GHCJS
build is unnecessary, and we can simplify it:</p>
<details>
<summary style="cursor: pointer">
<code>index.html</code>
</summary>
<div class="sourceCode" id="cb10"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;!DOCTYPE </span>html<span class="dt">&gt;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;html&gt;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;head&gt;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;script</span> <span class="er">language</span><span class="ot">=</span><span class="st">&quot;javascript&quot;</span> <span class="er">src</span><span class="ot">=</span><span class="st">&quot;all.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/head&gt;</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;body&gt;</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/body&gt;</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/html&gt;</span></span></code></pre></div>
</details>
<p>The only JavaScript file that needs to be copied over is then <code>all.js</code>. We can
write a <code>glitch.nix</code> file to simplify this process:</p>
<details>
<summary style="cursor: pointer">
<code>glitch.nix</code>
</summary>
<div class="sourceCode" id="cb11"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ./updater versions.json reflex-platform</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">fetcher</span> <span class="op">=</span> <span class="op">{</span> <span class="va">owner</span><span class="op">,</span> <span class="va">repo</span><span class="op">,</span> <span class="va">rev</span><span class="op">,</span> <span class="va">sha256</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>: <span class="bu">builtins</span>.<span class="bu">fetchTarball</span> <span class="op">{</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">inherit</span> sha256<span class="op">;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/</span><span class="sc">${</span>owner<span class="sc">}</span><span class="st">/</span><span class="sc">${</span>repo<span class="sc">}</span><span class="st">/tarball/</span><span class="sc">${</span>rev<span class="sc">}</span><span class="st">&quot;</span><span class="op">;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">reflex-platform</span> <span class="op">=</span> fetcher <span class="op">(</span><span class="bu">builtins</span>.fromJSON <span class="op">(</span><span class="bu">builtins</span>.readFile <span class="ss">./versions.json</span><span class="op">))</span>.reflex<span class="op">-</span>platform<span class="op">;</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>  <span class="va">pkgs</span> <span class="op">=</span> <span class="op">(</span><span class="bu">import</span> reflex<span class="op">-</span>platform <span class="op">{})</span>.nixpkgs<span class="op">;</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">project</span> <span class="op">=</span> <span class="bu">import</span> <span class="ss">./default.nix</span><span class="op">;</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>  <span class="va">html</span> <span class="op">=</span> pkgs.writeText <span class="st">&quot;index.html&quot;</span> <span class="st">&#39;&#39;</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;!DOCTYPE html&gt;</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;html&gt;</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a><span class="st">      &lt;head&gt;</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="st">        &lt;script language=&quot;javascript&quot; src=&quot;all.js&quot;&gt;&lt;/script&gt;</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a><span class="st">      &lt;/head&gt;</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a><span class="st">      &lt;body&gt;</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a><span class="st">      &lt;/body&gt;</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;/html&gt;</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span> pkgs.runCommand <span class="st">&quot;glitch&quot;</span> <span class="op">{}</span> <span class="st">&#39;&#39;</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a><span class="st">  mkdir -p $out</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a><span class="st">  cp </span><span class="sc">${</span>html<span class="sc">}</span><span class="st"> $out/index.html</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a><span class="st">  cp </span><span class="sc">${</span>project.ghcjs.small<span class="op">-</span>viz<span class="sc">}</span><span class="st">/bin/small-viz.jsexe/all.js $out/all.js</span></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a><span class="st">&#39;&#39;</span></span></code></pre></div>
</details>
<p><em>(<a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/a0127badaee44f316156121153c0e4bc41af9460#file-glitch-nix">revision</a>)</em></p>
<p>And then produce the files we need to copy over with:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-build glitch.nix</span></code></pre></div>
<p>I’ve gone ahead and done this, and it’s up on
<a href="https://small-viz.glitch.me/">small-viz.glitch.me/</a>.</p>
<p>Now that everything’s working, it would be nice to reduce the size of <code>all.js</code>,
which is currently over 5MB. Obelisk uses the <a href="https://developers.google.com/closure/compiler">Closure
Compiler</a> to minify JavaScript,
and we can adapt <a href="https://github.com/obsidiansystems/obelisk/blob/071e2edb92e623b4415fb6deedc4219ad1f829f0/default.nix#L147">what it
does</a>
and <a href="https://github.com/tomsmalley/marking/blob/a522b8c75a96146883a7e32acf5b17bb5f4abf1b/makefile#L5-L10">another example by Tom
Smalley</a>
that I found when I was looking into this to update <code>glitch.nix</code>:</p>
<details>
<summary style="cursor: pointer">
<code>glitch.nix</code>
</summary>
<div class="sourceCode" id="cb13"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ./updater versions.json reflex-platform</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">fetcher</span> <span class="op">=</span> <span class="op">{</span> <span class="va">owner</span><span class="op">,</span> <span class="va">repo</span><span class="op">,</span> <span class="va">rev</span><span class="op">,</span> <span class="va">sha256</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>: <span class="bu">builtins</span>.<span class="bu">fetchTarball</span> <span class="op">{</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">inherit</span> sha256<span class="op">;</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/</span><span class="sc">${</span>owner<span class="sc">}</span><span class="st">/</span><span class="sc">${</span>repo<span class="sc">}</span><span class="st">/tarball/</span><span class="sc">${</span>rev<span class="sc">}</span><span class="st">&quot;</span><span class="op">;</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">reflex-platform</span> <span class="op">=</span> fetcher <span class="op">(</span><span class="bu">builtins</span>.fromJSON <span class="op">(</span><span class="bu">builtins</span>.readFile <span class="ss">./versions.json</span><span class="op">))</span>.reflex<span class="op">-</span>platform<span class="op">;</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>  <span class="va">pkgs</span> <span class="op">=</span> <span class="op">(</span><span class="bu">import</span> reflex<span class="op">-</span>platform <span class="op">{})</span>.nixpkgs<span class="op">;</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">project</span> <span class="op">=</span> <span class="bu">import</span> <span class="ss">./default.nix</span><span class="op">;</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>  <span class="va">html</span> <span class="op">=</span> pkgs.writeText <span class="st">&quot;index.html&quot;</span> <span class="st">&#39;&#39;</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;!DOCTYPE html&gt;</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;html&gt;</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="st">      &lt;head&gt;</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a><span class="st">        &lt;script language=&quot;javascript&quot; src=&quot;all.js&quot;&gt;&lt;/script&gt;</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="st">      &lt;/head&gt;</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a><span class="st">      &lt;body&gt;</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a><span class="st">      &lt;/body&gt;</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;/html&gt;</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span> pkgs.runCommand <span class="st">&quot;glitch&quot;</span> <span class="op">{}</span> <span class="st">&#39;&#39;</span></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="st">  mkdir -p $out</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a><span class="st">  cp </span><span class="sc">${</span>html<span class="sc">}</span><span class="st"> $out/index.html</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="st">  </span><span class="sc">${</span>pkgs.closurecompiler<span class="sc">}</span><span class="st">/bin/closure-compiler \</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a><span class="st">    --externs=</span><span class="sc">${</span>project.ghcjs.small<span class="op">-</span>viz<span class="sc">}</span><span class="st">/bin/small-viz.jsexe/all.js.externs \</span></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a><span class="st">    --jscomp_off=checkVars \</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a><span class="st">    --js_output_file=&quot;$out/all.js&quot; \</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a><span class="st">    -O ADVANCED \</span></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a><span class="st">    -W QUIET \</span></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a><span class="st">    </span><span class="sc">${</span>project.ghcjs.small<span class="op">-</span>viz<span class="sc">}</span><span class="st">/bin/small-viz.jsexe/all.js</span></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a><span class="st">&#39;&#39;</span></span></code></pre></div>
</details>
<p><em>(<a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/aac5fe1258ccfc8c9b8ca685b9db1a4f538ae183#file-glitch-nix">revision</a>)</em></p>
<p>And this brings the size down to under 2MB.</p>
<p><a href="https://github.com/tomsmalley">Tom Smalley</a> points out that there is even a
<code>-dedupe</code> flag that GHCJS accepts, and although I couldn’t find good
documentation for this (beyond
<a href="https://www.reddit.com/r/haskell/comments/54knub/ghcjs_dedupe/">a Reddit post</a>), it
does get the filesize down to 1MB:</p>
<details>
<summary style="cursor: pointer">
<code>small-viz.cabal</code>
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="va">cabal</span><span class="op">-</span><span class="va">version</span><span class="ot">:</span><span>       </span><span class="op">&gt;=</span><span class="dv">1.10</span><span>
</span><span class="co">-- Initial package description &#39;small-viz.cabal&#39; generated by &#39;cabal init&#39;.</span><span>
</span><span class="co">--   For further documentation, see http://haskell.org/cabal/users-guide/</span><span>

</span><span class="va">name</span><span class="ot">:</span><span>                </span><span class="va">small</span><span class="op">-</span><span class="va">viz</span><span>
</span><span class="va">version</span><span class="ot">:</span><span>             </span><span class="dv">0.1</span><span class="op">.</span><span class="dv">0.0</span><span>
</span><span class="co">-- synopsis:</span><span>
</span><span class="co">-- description:</span><span>
</span><span class="co">-- bug-reports:</span><span>
</span><span class="va">license</span><span class="ot">:</span><span>             </span><span class="dt">BSD3</span><span>
</span><span class="va">license</span><span class="op">-</span><span class="va">file</span><span class="ot">:</span><span>        </span><span class="dt">LICENSE</span><span>
</span><span class="va">author</span><span class="ot">:</span><span>              </span><span class="dt">Vaibhav</span><span> </span><span class="dt">Sagar</span><span>
</span><span class="va">maintainer</span><span class="ot">:</span><span>          </span><span class="va">vaibhavsagar</span><span class="ot">@</span><span class="va">gmail</span><span class="op">.</span><span class="va">com</span><span>
</span><span class="co">-- copyright:</span><span>
</span><span class="co">-- category:</span><span>
</span><span class="va">build</span><span class="op">-</span><span class="kw">type</span><span class="ot">:</span><span>          </span><span class="dt">Simple</span><span>
</span><span class="va">extra</span><span class="op">-</span><span class="va">source</span><span class="op">-</span><span class="va">files</span><span class="ot">:</span><span>  </span><span class="va">CHANGELOG.md</span><span>

</span><span class="va">executable</span><span> </span><span class="va">small</span><span class="op">-</span><span class="va">viz</span><span>
  </span><span class="va">main</span><span class="op">-</span><span class="va">is</span><span class="ot">:</span><span>             </span><span class="va">Main.hs</span><span>
  </span><span class="va">other</span><span class="op">-</span><span class="va">modules</span><span class="ot">:</span><span>       </span><span class="dt">Viz</span><span>
  </span><span class="co">-- other-extensions:</span><span>
  </span><span class="va">build</span><span class="op">-</span><span class="va">depends</span><span class="ot">:</span><span>       </span><span class="va">base</span><span> </span><span class="op">&gt;=</span><span class="dv">4.12</span><span> </span><span class="op">&amp;&amp;</span><span> </span><span class="op">&lt;</span><span class="dv">4.13</span><span>
                     </span><span class="ot">,</span><span> </span><span class="va">lens</span><span>
                     </span><span class="ot">,</span><span> </span><span class="va">jsaddle</span><span>
                     </span><span class="ot">,</span><span> </span><span class="va">reflex</span><span>
                     </span><span class="ot">,</span><span> </span><span class="va">reflex</span><span class="op">-</span><span class="va">dom</span><span>
  </span><span class="co">-- hs-source-dirs:</span><span>
  </span><span class="kw">default</span><span class="op">-</span><span class="va">language</span><span class="ot">:</span><span>    </span><span class="dt">Haskell2010</span><span>
  </span><span class="kw">if</span><span> </span><span class="va">impl</span><span class="ot">(</span><span class="va">ghcjs</span><span class="ot">)</span><span>
    </span><span class="va">ghc</span><span class="op">-</span><span class="va">options</span><span class="ot">:</span><span> </span><span class="op">-</span><span class="va">dedupe</span></code></pre></div>
</details>
<p><em>(<a href="https://gist.github.com/vaibhavsagar/24b1754b8a269fd8c54a89cb73e64fa8/28a629d19e14c9d55b950b5629761818d38a9881#file-small-viz-cabal">revision</a>)</em></p>
<p>I think this is a good stopping point. We’ve:</p>
<ol type="1">
<li>Built a frontend-only Reflex app</li>
<li>Integrated with a JavaScript library</li>
<li>Used the JSaddle FFI idiomatically</li>
<li>Deployed to Glitch</li>
</ol>
<p>and I hope I’ve convinced you to take a closer look at Haskell the next time
you want to write something that runs in the browser.</p>
<p><em>Thanks to <a href="https://github.com/ali-abrar">Ali Abrar</a>, <a href="https://twitter.com/itsfarseen">Farseen Abdul
Salam</a>, and <a href="https://github.com/tomsmalley">Tom
Smalley</a> for comments and feedback.</em></p>
</summary>
</entry>
<entry>
    <title>You Won’t Believe This One Weird CPU Instruction!</title>
    <link href="https://vaibhavsagar.com/blog/2019/09/08/popcount/" />
    <id>https://vaibhavsagar.com/blog/2019/09/08/popcount/index.html</id>
    <published>2019-09-08</published>
    <updated>2019-09-08T00:00:00Z</updated>
    <summary type="html"><div class="info">
    Posted on  8 September 2019
    
</div>
<div class="info">
    
        Tags: <a title="All pages tagged &#39;programming&#39;." href="/blog/tags/programming/index.html">programming</a>
    
</div>

<p><em>Translated to <a href="https://pngset.com/ru-weird-cpu-instruction">Russian</a> by <a href="https://pngset.com/">Babur
Muradov</a> and <a href="https://pngflare.com/uz-popcount">Uzbek</a> by
<a href="https://pngflare.com/">Leonid Popov</a>.</em></p>
<p><em>This is a pseudo-transcript of <a href="https://www.youtube.com/watch?v=bLFqLfz2Fmc">a presentation I did at !!Con
2019</a>.</em></p>
<p>Most CPU architectures in use today have an instruction called <code>popcount</code>,
short for “population count”. Here’s what it does: it counts the number of set
bits in a machine word. For example (assuming 8-bit words for simplicity),
<code>popcount(00100110)</code> is <code>3</code> and <code>popcount(01100000)</code> is <code>2</code>.</p>
<p>You might be wondering, like I was, if there’s more to this instruction, but
that’s all it does! This doesn’t seem very useful, right?</p>
<p>I thought this might be a recent addition for some hyperspecialised use case,
but it has in fact been present in CPU architectures since at least 1961:</p>
<ul>
<li>1961: <a href="https://en.wikipedia.org/wiki/IBM_7030_Stretch">IBM Stretch</a></li>
<li>1964: <a href="https://en.wikipedia.org/wiki/CDC_6000_series">CDC 6000</a></li>
<li>1975: <a href="https://en.wikipedia.org/wiki/Cray-1">Cray-1</a></li>
<li>2005: <a href="https://en.wikipedia.org/wiki/SPARC">SPARC</a></li>
<li>2005: <a href="https://en.wikipedia.org/wiki/ARM_architecture#Advanced_SIMD_(NEON)">ARM NEON</a></li>
<li>2007: <a href="https://en.wikipedia.org/wiki/AMD_10h">AMD K10</a></li>
<li>2008: <a href="https://en.wikipedia.org/wiki/Nehalem_(microarchitecture)">Intel Nehalem</a></li>
</ul>
<p>So what’s going on?</p>
<h4 id="the-nsa-instruction">The NSA Instruction</h4>
<p><code>popcount</code> is also known as “The NSA Instruction”, and a <a href="https://groups.google.com/forum/#!msg/comp.arch/UXEi7G6WHuU/Z2z7fC7Xhr8J">very entertaining
thread on
<code>comp.arch</code></a>
discusses its uses inside and outside cryptography. It is rumoured that it was
originally added to CPU instructions at the behest of the NSA. As <a href="http://cryptome.org/jya/sadd.htm">this
archived email thread</a> puts it:</p>
<blockquote>
<p>It was almost a tradition that one of the first of any new faster CDC machine
was delivered to a “good customer” - picked up at the factory by an anonymous
truck, and never heard from again.</p>
</blockquote>
<p>This makes for a great story, but what were they using it for?</p>
<p>One measure of information content is the <a href="https://en.wikipedia.org/wiki/Hamming_weight">Hamming
weight</a>, which is the number of
symbols in a string that are different from the zero-symbol of the alphabet.
For a binary string, this is exactly <code>popcount</code>!</p>
<p><a href="http://www.talkchess.com/forum3/viewtopic.php?t=38521">As explained here</a>, the
NSA wanted to do cryptanalysis on intercepted messages, and since the CDC 6000
had 60-bit words, one word was enough to store most alphabets they were
interested in. They were able to:</p>
<ol type="1">
<li>Split a message into lines</li>
<li>Set a bit for each unique character they encountered per line</li>
<li>Use <code>popcount</code> to count the distinct characters</li>
<li>Use the count as a hash for further cryptanalysis</li>
</ol>
<p>Curiously, <code>popcount</code> seems to have disappeared from instruction sets between
the mid-1970s and the mid-2000s, so there has to be more to it than
cryptographic applications to explain its return. What else can it be used for?</p>
<h4 id="error-correction">Error Correction</h4>
<p>Related to the concept of Hamming weight is <a href="https://en.wikipedia.org/wiki/Hamming_distance">Hamming
distance</a>, which is the number
of differing positions between two strings of identical length. For two binary
strings <code>x</code> and <code>y</code>, this is just the <code>popcount</code> of them XORed together. For
example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode default"><code class="sourceCode default"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>00100110</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>01100000 ^</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>--------</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>01000110</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>popcount(01000110) = 3</span></code></pre></div>
<p>For telecommunications applications, this helps us calculate the signal
distance, where a known word is sent over the wire and the number of flipped
bits are counted to provide an estimate of the error introduced by transmission.</p>
<p>We can then design an <a href="https://en.wikipedia.org/wiki/Hamming_distance#Error_detection_and_error_correction">error-correcting
code</a>
accordingly, e.g. if we want to be robust against up to 2 flipped bits, our
code words need to differ in Hamming distance by at least 5.</p>
<h4 id="binary-convolutional-neural-networks">Binary Convolutional Neural Networks</h4>
<p>And now for something completely different: binary convolutional neural
networks! But first, what are they?</p>
<ul>
<li>Binary means that we’re using matrices consisting of only the values +1 (coded
as <code>1</code>) and -1 (coded as <code>0</code>), as opposed to 32-bit floating-point values.</li>
<li>Convolutional means matrix multiplication is involved?</li>
<li>Neural networks are systems inspired by animal brains (I’m a bit hazy on
this part).</li>
</ul>
<p>In summary, we have to do binary matrix multiplication. But what’s special
about binary matrices?</p>
<p>Ordinary matrix multiplication on 32-bit values is a good fit on desktop
computers with powerful CPUs and GPUs, but increasingly we also want to do
useful work on smaller and simpler devices, such as smartphones, routers,
smartwatches, etc. We can decompose these more complex matrices into layers of
binary matrices, and these resulting matrices are so much easier to store and
operate on that we are better off even though there are more layers.</p>
<p>Where does <code>popcount</code> come into play? It’s used to calculate the dot product of
two binary matrices:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode default"><code class="sourceCode default"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>a = xnor(x, y)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>b = popcount(a)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>c = len(a)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>dot(x, y) = 2 × b − c</span></code></pre></div>
<p>More details are available
<a href="https://sushscience.wordpress.com/2017/10/01/understanding-binary-neural-networks/">here</a>
and
<a href="https://developer.apple.com/documentation/metalperformanceshaders/mpscnnbinaryconvolution">here</a>.</p>
<h4 id="chess-programming">Chess Programming</h4>
<p>Many chess programs store data using a
<a href="https://www.chessprogramming.org/Bitboards">bitboard</a> representation, which
conveniently fits into a 64-bit word. <a href="https://www.chessprogramming.org/Population_Count">Population
Count</a> has been used to
perform meaningful operations with this representation, such as calculating the
<a href="https://www.chessprogramming.org/Mobility#Mobility_with_Bitboards">mobility</a>
of a piece.</p>
<h4 id="molecular-fingerprinting">Molecular Fingerprinting</h4>
<p>This is related to the notion of Hamming distance above: molecules are hashed
in some way and compared (with <code>popcount</code>) to determine how similar they are.
More details on that
<a href="http://www.dalkescientific.com/writings/diary/archive/2008/06/26/fingerprint_background.html">here</a>.</p>
<h4 id="hash-array-mapped-tries">Hash Array Mapped Tries</h4>
<p>This is where I first learned about <code>popcount</code>! The HAMT is a data structure
(<a href="https://lampwww.epfl.ch/papers/idealhashtrees.pdf">pioneered by Phil
Bagwell</a>) that can store a
very large number of values (usually 32 or 64) in an array at each node of the
trie. However, allocating memory for a 32 or 64-element array every time can be
incredibly wasteful, especially if the array only actually contains a handful
of elements. The solution is to add a bitmask in which the number of bits that
are set corresponds to the number of elements in the array, which allows the
array to grow and shrink as required. Calculating the index for a given element
efficiently can then be done using <code>popcount</code>. You can learn more about how
they work from <a href="/blog/2018/07/29/hamts-from-scratch/">this blog post</a>, where I
implement them myself.</p>
<h4 id="succinct-data-structures">Succinct Data Structures</h4>
<p>This is an exciting new area of research that focuses on how to store data in
as little space as possible, without having to decompress it in order to do
useful work. One technique is to think in terms of arrays of bits (bitvectors), which can be
queried using two operations:</p>
<ul>
<li><code>rank(i)</code> counts the number of bits set upto the <code>i</code>th index in the bitvector</li>
<li><code>select(i)</code> finds the index where the <code>i</code>th ranked bit is set</li>
</ul>
<p>Making these operations efficient on large bitvectors requires constructing an
index and using it effectively, both involving <code>popcount</code>. There’s <a href="https://alexbowe.com/rrr/">a good
overview of the RRR index here</a>, and as far as I can
tell the current state-of-the-art approach is described in <a href="http://www.cs.cmu.edu/~./dga/papers/zhou-sea2013.pdf">Space-Efficient,
High-Performance Rank &amp; Select Structures on Uncompressed Bit
Sequences</a>.</p>
<h4 id="compiler-optimisations">Compiler Optimisations</h4>
<p><code>popcount</code> has become so pervasive that both
<a href="https://godbolt.org/z/JUzmD8">GCC</a> and <a href="https://godbolt.org/z/AVqMGl">Clang</a>
will detect an implementation of <code>popcount</code> and replace it with the built-in
instruction. Imagine Clippy going “I see you are trying to implement
<code>popcount</code>, let me go ahead and fix that for you”! The relevant LLVM code is
<a href="https://github.com/llvm-mirror/llvm/blob/f36485f7ac2a8d72ad0e0f2134c17fd365272285/lib/Transforms/Scalar/LoopIdiomRecognize.cpp#L960">here</a>.
Daniel Lemire points to this as an example of <a href="https://lemire.me/blog/2016/05/23/the-surprising-cleverness-of-modern-compilers/">the surprising cleverness of
modern
compilers</a>.</p>
<h4 id="conclusion">Conclusion</h4>
<p>From beginnings shrouded in mystery, <code>popcount</code> has emerged as a generally
useful, if slightly unusual, CPU instruction. I love how it ties together such
different fields of computing, and I wonder how many other similarly weird
instructions are out there. If you have a favourite, I’d love to hear about it!</p>
</summary>
</entry>
<entry>
    <title>Industrial-strength Deployments in Three Commands</title>
    <link href="https://vaibhavsagar.com/blog/2019/08/22/industrial-strength-deployments/" />
    <id>https://vaibhavsagar.com/blog/2019/08/22/industrial-strength-deployments/index.html</id>
    <published>2019-08-22</published>
    <updated>2019-08-22T00:00:00Z</updated>
    <summary type="html"><div class="info">
    Posted on 22 August 2019
    
</div>
<div class="info">
    
        Tags: <a title="All pages tagged &#39;nix&#39;." href="/blog/tags/nix/index.html">nix</a>, <a title="All pages tagged &#39;programming&#39;." href="/blog/tags/programming/index.html">programming</a>, <a title="All pages tagged &#39;devops&#39;." href="/blog/tags/devops/index.html">devops</a>
    
</div>

<p>If your deployment target is running NixOS, a full-system deployment is only
three commands:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-copy-closure <span class="at">--to</span> <span class="at">--use-substitutes</span> <span class="op">&lt;</span>target<span class="op">&gt;</span> <span class="op">&lt;</span>path<span class="op">&gt;</span>                                #1</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ssh <span class="op">&lt;</span>target<span class="op">&gt;</span> -- <span class="st">&quot;sudo nix-env --profile /nix/var/nix/profiles/system --set &lt;path&gt;&quot;</span>     <span class="co">#2</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ssh <span class="op">&lt;</span>target<span class="op">&gt;</span> -- <span class="st">&quot;sudo /nix/var/nix/profiles/system/bin/switch-to-configuration switch&quot;</span> <span class="co">#3</span></span></code></pre></div>
<p>Here’s what each command does:</p>
<ol type="1">
<li>Copies the transitive closure of the new system configuration to the target,
using binary caches (<code>--use-substitutes</code>) where possible.</li>
<li>Sets the current system profile to the new system configuration. This isn’t
strictly necessary, but allows us to roll back to this configuration later.</li>
<li>Switches to the new system configuration.</li>
</ol>
<p>This workflow has been described before <a href="https://typeclasses.com/nixos-on-aws">in
Typeclasses</a> and <a href="http://www.haskellforall.com/2018/08/nixos-in-production.html">by Gabriella
Gonzalez</a>, but I
thought one more post demonstrating how to use these commands wouldn’t hurt.
Since the AWS use case has been covered so thoroughly by Typeclasses, I’m going
to use the <a href="https://www.packet.com/">packet.net</a> cloud instead.</p>
<h4 id="provisioning">Provisioning</h4>
<p>I logged on to the Packet console and launched a <code>t1.small.x86</code> instance
running NixOS 19.03 (the latest as of this writing). It was assigned the IP
address <code>147.75.38.113</code>. Since I added my SSH keys when I first created my
Packet account, I was able to SSH into this instance at <code>root@147.75.38.113</code>
without any further configuration.</p>
<h4 id="copying-the-existing-configuration">Copying the existing configuration</h4>
<p>The next step is to copy the existing configuration, especially
instance-specific hardware configuration:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> scp <span class="at">-r</span> root@147.75.38.113:/etc/nixos/<span class="pp">*</span> .</span></code></pre></div>
<p>There’s probably a better way to do this, but for a quick one-off demonstration
this is fine. <a href="https://github.com/vaibhavsagar/nixos-config/commit/e49e9a980f2d547684bcab3a34a34dba4521b991">Here’s the commit adding those
files</a>.</p>
<p>We’ll only be making changes to <code>configuration.nix</code>, which for me looks like
this (after all commented-out lines have been removed):</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">imports</span> <span class="op">=</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">[</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>      <span class="ss">./packet.nix</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">];</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">boot</span>.<span class="va">loader</span>.<span class="va">grub</span>.<span class="va">enable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  <span class="va">boot</span>.<span class="va">loader</span>.<span class="va">grub</span>.<span class="va">version</span> <span class="op">=</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">stateVersion</span> <span class="op">=</span> <span class="st">&quot;19.03&quot;</span><span class="op">;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h4 id="building-a-system-closure">Building a system closure</h4>
<p>The Nix expression to build a whole system is pretty straightforward (as
described in the Typeclasses article):</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">nixos</span> <span class="op">=</span> <span class="bu">import</span> &lt;<span class="ss">nixpkgs/nixos</span>&gt; <span class="op">{</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">configuration</span> <span class="op">=</span> <span class="bu">import</span> <span class="ss">./configuration.nix</span><span class="op">;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  nixos.system</span></code></pre></div>
<p>but this doesn’t provide any way of pinning <code>nixpkgs</code>. Another way (<a href="http://www.haskellforall.com/2018/08/nixos-in-production.html#pinning-nixpkgs">as
described by Gabriella
Gonzalez</a>),
is to explicitly depend on a particular revision of <code>nixpkgs</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">nixpkgs</span> <span class="op">=</span> <span class="bu">builtins</span>.<span class="bu">fetchTarball</span> <span class="op">{</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/NixOS/nixpkgs/archive/b74b1cdb2fecc31ff7a127c5bc89771f887c93bb.tar.gz&quot;</span><span class="op">;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;0ncr4g29220amqm4riaa1xf4jz55v2nmh9fi16f1gzhww1gplk8h&quot;</span><span class="op">;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="bu">import</span> <span class="st">&quot;</span><span class="sc">${</span>nixpkgs<span class="sc">}</span><span class="st">/nixos&quot;</span> <span class="op">{</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="va">configuration</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>      <span class="va">imports</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>        <span class="ss">/etc/nixos/configuration.nix</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>      <span class="op">];</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    <span class="va">system</span> <span class="op">=</span> <span class="st">&quot;x86_64-linux&quot;</span><span class="op">;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>but the downside there is that there’s no automated way to update the revision
of <code>nixpkgs</code>. I have <a href="/blog/2018/05/27/quick-easy-nixpkgs-pinning/">my own approach to pinning
<code>nixpkgs</code></a>,
where I have a <code>versions.json</code> that stores version information:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;nixpkgs&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;owner&quot;</span><span class="fu">:</span> <span class="st">&quot;NixOS&quot;</span><span class="fu">,</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;repo&quot;</span><span class="fu">:</span> <span class="st">&quot;nixpkgs-channels&quot;</span><span class="fu">,</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;branch&quot;</span><span class="fu">:</span> <span class="st">&quot;nixos-19.03&quot;</span><span class="fu">,</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;rev&quot;</span><span class="fu">:</span> <span class="st">&quot;77295b0bd26555c39a1ba9c1da72dbdb651fd280&quot;</span><span class="fu">,</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;sha256&quot;</span><span class="fu">:</span> <span class="st">&quot;18v866h12xk6l1s37nk1vns869pvzphmnnlhrnm2b1zklg2hd1nq&quot;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p>and a script that uses <code>jq</code> to update this file. My (slightly more complex)
expression then looks like this:</p>
<p><em>default.nix</em></p>
<div class="sourceCode" id="cb7"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">fetcher</span> <span class="op">=</span> <span class="op">{</span> <span class="va">owner</span><span class="op">,</span> <span class="va">repo</span><span class="op">,</span> <span class="va">rev</span><span class="op">,</span> <span class="va">sha256</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>: <span class="bu">builtins</span>.<span class="bu">fetchTarball</span> <span class="op">{</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">inherit</span> sha256<span class="op">;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/</span><span class="sc">${</span>owner<span class="sc">}</span><span class="st">/</span><span class="sc">${</span>repo<span class="sc">}</span><span class="st">/tarball/</span><span class="sc">${</span>rev<span class="sc">}</span><span class="st">&quot;</span><span class="op">;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  <span class="va">nixpkgs</span> <span class="op">=</span> fetcher <span class="op">(</span><span class="bu">builtins</span>.fromJSON <span class="op">(</span><span class="bu">builtins</span>.readFile <span class="ss">./versions.json</span><span class="op">))</span>.nixpkgs<span class="op">;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">nixos</span> <span class="op">=</span> <span class="bu">import</span> <span class="st">&quot;</span><span class="sc">${</span>nixpkgs<span class="sc">}</span><span class="st">/nixos&quot;</span> <span class="op">{</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">configuration</span> <span class="op">=</span> <span class="bu">import</span> <span class="ss">./configuration.nix</span><span class="op">;</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>  nixos.system</span></code></pre></div>
<p>and this allows me to both be explicit about <code>nixpkgs</code> as well as easily update it
when necessary. <a href="https://github.com/vaibhavsagar/nixos-config/commit/5126d9dba971d6480aeec43c4263c5a7f7b1f1b5">Here’s the commit that adds those
files</a>.</p>
<p>Building the closure locally is also straightforward (as described <a href="https://typeclasses.com/nixos-on-aws#building-nixos-locally">here</a>):</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-build <span class="at">--no-out-link</span> default.nix</span></code></pre></div>
<h4 id="deploying-the-system-closure">Deploying the system closure</h4>
<p>With all of our prerequisites taken care of, deploying the system closure is straightforward:</p>
<p><em>deploy.sh</em></p>
<div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> <span class="at">-euxo</span> pipefail</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="va">TARGET</span><span class="op">=</span><span class="st">&quot;root@147.75.38.113&quot;</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="va">PROFILE_PATH</span><span class="op">=</span><span class="st">&quot;</span><span class="va">$(</span><span class="ex">nix-build</span> <span class="at">--no-out-link</span> default.nix<span class="va">)</span><span class="st">&quot;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="ex">nix-copy-closure</span> <span class="at">--to</span> <span class="at">--use-substitutes</span> <span class="va">$TARGET</span> <span class="va">$PROFILE_PATH</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="fu">ssh</span> <span class="va">$TARGET</span> <span class="at">--</span> <span class="st">&quot;nix-env --profile /nix/var/nix/profiles/system --set </span><span class="va">$PROFILE_PATH</span><span class="st"> &amp;&amp; /nix/var/nix/profiles/system/bin/switch-to-configuration switch&quot;</span></span></code></pre></div>
<p>This takes care of both building the new system closure and deploying it.</p>
<p><a href="https://github.com/vaibhavsagar/nixos-config/commit/be6aaa026c8ebf1efd7c44743a8770b921111a2e">Here’s the commit that adds <code>deploy.sh</code></a>.</p>
<h4 id="adding-a-service">Adding a service</h4>
<p>Let’s deploy the final version of the small Haskell web service from my
<a href="/blog/2019/07/04/functional-devops/">Functional
DevOps</a> post. The
application consists of two files:</p>
<p><em>Main.hs</em></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span> </span><span class="pp">{-# LANGUAGE OverloadedStrings #-}</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Web.Scotty</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">System.Environment</span><span> </span><span class="ot">(</span><span class="va">getArgs</span><span class="ot">)</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Data.Monoid</span><span> </span><span class="ot">(</span><span class="va">mconcat</span><span class="ot">)</span><span>

</span><span class="va">main</span><span> </span><span class="ot">=</span><span> </span><span class="va">getArgs</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="ot">(</span><span class="va">port</span><span class="ot">:</span><span class="ot">_</span><span class="ot">)</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">scotty</span><span> </span><span class="ot">(</span><span class="va">read</span><span> </span><span class="va">port</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">get</span><span> </span><span class="st">&quot;/:word&quot;</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
        </span><span class="va">beam</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">param</span><span> </span><span class="st">&quot;word&quot;</span><span>
        </span><span class="va">html</span><span> </span><span class="op">$</span><span> </span><span class="va">mconcat</span><span> </span><span class="ot">[</span><span class="st">&quot;&lt;h1&gt;Scotty, &quot;</span><span class="ot">,</span><span> </span><span class="va">beam</span><span class="ot">,</span><span> </span><span class="st">&quot; me up!&lt;/h1&gt;&quot;</span><span class="ot">]</span></code></pre></div>
<p><em>blank-me-up.cabal</em></p>
<div class="sourceCode" id="cb10"><pre class="sourceCode default"><code class="sourceCode default"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>name:                blank-me-up</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>version:             0.1.0.0</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>license:             BSD3</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>build-type:          Simple</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>cabal-version:       &gt;=1.10</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>executable blank-me-up</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>  main-is:             Main.hs</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>  build-depends:       base &gt;=4.9 &amp;&amp; &lt;5</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>                     , scotty</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>  default-language:    Haskell2010</span></code></pre></div>
<p>and the Nix service is one file:</p>
<p><em>service.nix</em></p>
<div class="sourceCode" id="cb11"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">lib</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">blank-me-up</span> <span class="op">=</span> pkgs.haskellPackages.callCabal2nix <span class="st">&quot;blank-me-up&quot;</span> <span class="ss">../app</span> <span class="op">{};</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">cfg</span> <span class="op">=</span> config.services.blank<span class="op">-</span>me<span class="op">-</span>up<span class="op">;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span> <span class="op">{</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">options</span>.<span class="va">services</span>.<span class="va">blank-me-up</span>.<span class="va">enable</span> <span class="op">=</span> lib.mkEnableOption <span class="st">&quot;Blank Me Up&quot;</span><span class="op">;</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>  <span class="va">options</span>.<span class="va">services</span>.<span class="va">blank-me-up</span>.<span class="va">port</span> <span class="op">=</span> lib.mkOption <span class="op">{</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    <span class="va">default</span> <span class="op">=</span> <span class="dv">3000</span><span class="op">;</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>    <span class="va">type</span> <span class="op">=</span> lib.types.int<span class="op">;</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>  <span class="va">config</span> <span class="op">=</span> lib.mkIf cfg.enable <span class="op">{</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>    <span class="va">networking</span>.<span class="va">firewall</span>.<span class="va">allowedTCPPorts</span> <span class="op">=</span> <span class="op">[</span> cfg.port <span class="op">];</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">systemd</span>.<span class="va">services</span>.<span class="va">blank-me-up</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>      <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;Blank Me Up&quot;</span><span class="op">;</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>      <span class="va">after</span> <span class="op">=</span> <span class="op">[</span> <span class="st">&quot;network.target&quot;</span> <span class="op">];</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>      <span class="va">wantedBy</span> <span class="op">=</span> <span class="op">[</span> <span class="st">&quot;multi-user.target&quot;</span> <span class="op">];</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>      <span class="va">serviceConfig</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>        <span class="va">ExecStart</span> <span class="op">=</span> <span class="st">&quot;</span><span class="sc">${</span>blank<span class="op">-</span>me<span class="op">-</span>up<span class="sc">}</span><span class="st">/bin/blank-me-up </span><span class="sc">${</span><span class="bu">toString</span> cfg.port<span class="sc">}</span><span class="st">&quot;</span><span class="op">;</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>        <span class="va">Restart</span> <span class="op">=</span> <span class="st">&quot;always&quot;</span><span class="op">;</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>        <span class="va">KillMode</span> <span class="op">=</span> <span class="st">&quot;process&quot;</span><span class="op">;</span></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb11-27"><a href="#cb11-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>For more information about what’s happening in <code>service.nix</code>, see <a href="/blog/2019/07/04/functional-devops/#service-configuration">the relevant
section of my Functional DevOps
post</a>.</p>
<p><a href="https://github.com/vaibhavsagar/nixos-config/commit/466e0e1867e47346ed8cc706b812a8cb21c76c19">Here’s the commit that adds these
files</a>.</p>
<p>Enabling the service is as easy as adding two lines to <code>configuration.nix</code>:</p>
<p><em>configuration.nix</em></p>
<div class="sourceCode" id="cb12"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">imports</span> <span class="op">=</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">[</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>      <span class="ss">./packet.nix</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>      <span class="ss">./deploy/nix/service.nix</span>        <span class="co">#1</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">];</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>  <span class="va">boot</span>.<span class="va">loader</span>.<span class="va">grub</span>.<span class="va">enable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">boot</span>.<span class="va">loader</span>.<span class="va">grub</span>.<span class="va">version</span> <span class="op">=</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>  <span class="va">services</span>.<span class="va">blank-me-up</span>.<span class="va">enable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span> <span class="co">#2</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">stateVersion</span> <span class="op">=</span> <span class="st">&quot;19.03&quot;</span><span class="op">;</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><a href="https://github.com/vaibhavsagar/nixos-config/commit/07b163f3c0fe728078bb357841e57c7020bdd4d3">Here’s the commit that makes that change</a>.</p>
<h4 id="deploying-the-service">Deploying the service</h4>
<div class="sourceCode" id="cb13"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ./deploy.sh</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">+</span> TARGET=root@147.75.38.113</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ex">++</span> nix-build <span class="at">--no-out-link</span> default.nix</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ex">+</span> PROFILE_PATH=/nix/store/<span class="op">&lt;</span>hash<span class="op">&gt;</span>-nixos-system-nixos-19.03pre-git</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">+</span> nix-copy-closure <span class="at">--to</span> <span class="at">--use-substitutes</span> root@147.75.38.113 /nix/store/<span class="op">&lt;</span>hash<span class="op">&gt;</span>-nixos-system-nixos-19.03pre-git</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>...<span class="op">&gt;</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="ex">+</span> ssh root@147.75.38.113 <span class="at">--</span> <span class="st">&#39;nix-env --profile /nix/var/nix/profiles/system --set /nix/store/&lt;hash&gt;-nixos-system-nixos-19.03pre-git &amp;&amp; /nix/var/nix/profiles/system/bin/switch-to-configuration switch&#39;</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="ex">updating</span> GRUB 2 menu...</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="ex">activating</span> the configuration...</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="ex">setting</span> up /etc...</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="ex">reloading</span> user units for root...</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="ex">setting</span> up tmpfiles</span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> curl http://147.75.38.113:3000/beam</span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>h1<span class="op">&gt;</span>Scotty, <span class="ex">beam</span> me up!<span class="op">&lt;</span>/h1<span class="op">&gt;</span></span></code></pre></div>
<h4 id="but-this-is-just-a-janky-bash-script">But this is just a janky bash script!!???</h4>
<p>It’s definitely the case that <code>deploy.sh</code> is short and unsophisticated, but the
three commands it invokes are what’s really important here. Once you begin
looking for them, you will find them everywhere, since they’re the best way of
deploying to NixOS! They’re used in
<a href="https://github.com/NixOS/nixops/blob/c8d3a3ff5fb20e8e4d494de972ebb2a1a1ec1e08/nixops/backends/__init__.py#L339-L367">NixOps</a>,
<a href="https://github.com/awakesecurity/nix-deploy/blob/68217cea7ba6746c9a262ddccb11178909841988/src/Main.hs#L159-L229">nix-deploy</a>,
and
<a href="https://github.com/obsidiansystems/obelisk/blob/1f9f466fc38a37a72afb316cee4f3317af204220/lib/command/src/Obelisk/Command/Deploy.hs#L136-L158">obelisk</a>,
and a quick GitHub search for
<a href="https://github.com/search?q=switch-to-configuration&amp;type=Code">“switch-to-configuration”</a>
turns up many more examples. At a previous job, our deployment platform used
these three commands as well, and we routinely deployed to hundreds of servers
without any deployment-related issues, so I’m comfortable saying that this is
an industrial-grade deployment solution.</p>
<h4 id="what-about-provisioning">What about provisioning?</h4>
<p>These tools don’t care how you provision your servers, as long as you end up
with NixOS targets you can SSH into. For quick demonstrations and small
deployments, manual provisioning is fine, but for anything beyond that, I’d
recommend using a tool like <a href="https://www.terraform.io/">Terraform</a>. You can
even specify your Terraform configuration with Nix using something like
<a href="https://github.com/mrVanDalo/terranix">terranix</a>, and this is in fact what we
did at the previous job I mentioned earlier, since Nix makes a great templating
language and comes with excellent support for producing JSON which can then be
fed into Terraform. It’s also possible to output YAML from Nix, which means
it’s easy to interoperate with most infrastructure tooling.</p>
<h4 id="should-i-use-this-instead-of-my-current-deployment-solution">Should I use this instead of my current deployment solution?</h4>
<p>My aim with this post is not to convince you to drop whatever you’re currently
using in favour of a hand-rolled bash script and NixOS, especially if your
current solution works well for you. I do, however, want to encourage you to
think about how the process I’ve outlined here compares. In which ways is it
better or worse?</p>
<p>Since this is the workflow I’ve had the most experience with, it was a rude
shock to start working with container-based deployments where even tiny changes
require a full (slow) rebuild, and the actual deployment lifecycle is more
complex and error-prone. I think it’s important to point out that things don’t
have to be this way.</p>
<p>In my <a href="/blog/2019/07/04/functional-devops/">Functional
DevOps</a> post, I
outlined some characteristics of an ideal DevOps workflow, and I think the
process I’ve outlined here meets them all:</p>
<ul>
<li><strong>Automatic</strong>: The process is completely scriptable.</li>
<li><strong>Repeatable</strong>: I can leverage NixOS to get the same results every time.</li>
<li><strong>Idempotent</strong>: Deploying the same thing a second time is a no-op.</li>
<li><strong>Reversible</strong>: Rolling back is very easy.</li>
<li><strong>Atomic</strong>: A deploy either fails or succeeds, there’s no weird in-between<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>.</li>
</ul>
<p>I think this is pretty great for three commands. I hope this blog post can help
move us towards better systems by making this corner of NixOS more
approachable!</p>
<p><em>Thanks to <a href="https://www.brianthicks.com/">Brian Hicks</a> for comments and
feedback!</em></p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>As <a href="https://www.reddit.com/r/NixOS/comments/ctx8ii/industrialstrength_deployments_in_three_commands/expfqpv">ElvishJerricco points out on
Reddit</a>,
this isn’t quite true in the case of broken services.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</summary>
</entry>
<entry>
    <title>Easy IHaskell Docker Images with Nix</title>
    <link href="https://vaibhavsagar.com/blog/2019/08/11/ihaskell-nix-docker/" />
    <id>https://vaibhavsagar.com/blog/2019/08/11/ihaskell-nix-docker/index.html</id>
    <published>2019-08-11</published>
    <updated>2019-08-11T00:00:00Z</updated>
    <summary type="html"><div class="info">
    Posted on 11 August 2019
    
</div>
<div class="info">
    
        Tags: <a title="All pages tagged &#39;haskell&#39;." href="/blog/tags/haskell/index.html">haskell</a>, <a title="All pages tagged &#39;nix&#39;." href="/blog/tags/nix/index.html">nix</a>
    
</div>

<p>Today I learned how to turn an IHaskell Nix expression into a Docker image. Here is an example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co"># default.nix</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">pkgs</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">ihaskell</span> <span class="op">=</span> <span class="bu">builtins</span>.<span class="bu">fetchTarball</span> <span class="op">{</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>      <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/gibiansky/IHaskell/tarball/93bfa3a7a434c1dfe6873c2105c43856c282e183&quot;</span><span class="op">;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>      <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;1cvqqmpvz7s3d7zclmkm5igx36clrbdiafs47i9rik3rdzw0gr3d&quot;</span><span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">nixpkgs</span> <span class="op">=</span> <span class="bu">builtins</span>.<span class="bu">fetchTarball</span> <span class="op">{</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/NixOS/nixpkgs-channels/tarball/9ca57dc9171ca4547abf076a8987ed73c46f2e15&quot;</span><span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>      <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;18d01cw6s6k9fnac3vq0k6inybqalkz4ak88pw67q4wqzq9rc07l&quot;</span><span class="op">;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="va">nixpkgs</span> <span class="op">=</span> <span class="bu">import</span> pkgs.nixpkgs <span class="op">{};</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="va">NB_USER</span> <span class="op">=</span> <span class="st">&quot;jovyan&quot;</span><span class="op">;</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>  <span class="va">NB_UID</span> <span class="op">=</span> <span class="st">&quot;1000&quot;</span><span class="op">;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>  <span class="va">dockerEtc</span> <span class="op">=</span> nixpkgs.runCommand <span class="st">&quot;docker-etc&quot;</span> <span class="op">{}</span> <span class="st">&#39;&#39;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p $out/etc/pam.d</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="st">    echo &quot;root:x:0:0::/root:/bin/sh&quot; &gt; $out/etc/passwd</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="st">    echo &quot;</span><span class="sc">${</span>NB_USER<span class="sc">}</span><span class="st">:x:1000:1000::/home/</span><span class="sc">${</span>NB_USER<span class="sc">}</span><span class="st">:&quot; &gt;&gt; $out/etc/passwd</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="st">    echo &quot;root:!x:::::::&quot; &gt; $out/etc/shadow</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="st">    echo &quot;</span><span class="sc">${</span>NB_USER<span class="sc">}</span><span class="st">:!:::::::&quot; &gt;&gt; $out/etc/shadow</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a><span class="st">    echo &quot;root:x:0:&quot; &gt; $out/etc/group</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="st">    echo &quot;</span><span class="sc">${</span>NB_USER<span class="sc">}</span><span class="st">:x:1000:&quot; &gt;&gt; $out/etc/group</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a><span class="st">    echo &quot;root:x::&quot; &gt; $out/etc/gshadow</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a><span class="st">    echo &quot;</span><span class="sc">${</span>NB_USER<span class="sc">}</span><span class="st">:!::&quot; &gt;&gt; $out/etc/gshadow</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>  <span class="va">ihaskell</span> <span class="op">=</span> <span class="bu">import</span> <span class="st">&quot;</span><span class="sc">${</span>pkgs.ihaskell<span class="sc">}</span><span class="st">/release.nix&quot;</span> <span class="op">{</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>    <span class="kw">inherit</span> nixpkgs<span class="op">;</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>    <span class="va">compiler</span> <span class="op">=</span> <span class="st">&quot;ghc864&quot;</span><span class="op">;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>    <span class="va">packages</span> <span class="op">=</span> <span class="va">self</span><span class="op">:</span> <span class="kw">with</span> self<span class="op">;</span> <span class="op">[];</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span> nixpkgs.dockerTools.buildLayeredImage <span class="op">{</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>    <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;ihaskell-nix&quot;</span><span class="op">;</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>    <span class="va">tag</span> <span class="op">=</span> <span class="st">&quot;latest&quot;</span><span class="op">;</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>    <span class="va">contents</span> <span class="op">=</span>  <span class="op">[</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>      dockerEtc</span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>      ihaskell</span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>      nixpkgs.bashInteractive</span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>    <span class="op">];</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>    <span class="va">config</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>      <span class="va">Cmd</span> <span class="op">=</span> <span class="op">[</span><span class="st">&quot;ihaskell-notebook&quot;</span> <span class="st">&quot;--ip=0.0.0.0&quot;</span><span class="op">];</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>      <span class="va">User</span> <span class="op">=</span> NB_USER<span class="op">;</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>      <span class="va">WorkingDir</span> <span class="op">=</span> <span class="st">&quot;/home/</span><span class="sc">${</span>NB_USER<span class="sc">}</span><span class="st">&quot;</span><span class="op">;</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>    <span class="va">extraCommands</span> <span class="op">=</span> <span class="st">&#39;&#39;</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a><span class="st">      mkdir -m 1777 ./tmp</span></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a><span class="st">      mkdir -m 777 -p ./home/</span><span class="sc">${</span>NB_USER<span class="sc">}</span></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a><span class="st">    &#39;&#39;</span><span class="op">;</span></span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>    <span class="va">maxLayers</span> <span class="op">=</span> <span class="dv">100</span><span class="op">;</span></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>;</span></code></pre></div>
<p>This is how to use it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> docker load <span class="op">&lt;</span> <span class="va">$(</span><span class="ex">nix-build</span> default.nix<span class="va">)</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> docker run <span class="at">-p8888:8888</span> <span class="at">-it</span> ihaskell-nix:latest</span></code></pre></div>
<p>This uses IHaskell’s <a href="https://github.com/gibiansky/IHaskell/blob/93bfa3a7a434c1dfe6873c2105c43856c282e183/release.nix">built-in
<code>release.nix</code></a>
to do most of the heavy lifting for IHaskell itself, and does a couple of other
things:</p>
<ol type="1">
<li>Creates the <code>/tmp</code> directory</li>
<li>Sets up a <code>jovyan</code> user, because Jupyter complains when run as <code>root</code></li>
<li>Includes <code>bash</code>, which is not strictly necessary but is useful for poking
around in the image and for using <code>:!</code> from within a notebook</li>
</ol>
<p>Building the image and loading it into Docker are both very slow compared to
using Nix directly (even though I’m using the Nix support for layered images),
so I wouldn’t recommend using this approach for local development. I’m
primarily interested in doing this to:</p>
<ol type="1">
<li>Share IHaskell notebooks with people who are less comfortable with Nix</li>
<li>Deploy to platforms such as Amazon’s Elastic Container Service and Google’s
App Engine, which offer excellent support for Docker and no support for Nix</li>
</ol>
<p>Unfortunately this isn’t quite ready to deploy yet, especially because Jupyter
uses token-based authentication by default and the console output will not
necessarily be available after deployment. It’s possible to set a password
instead, so I expect that copying the output of <code>jupyter notebook --generate-config</code> and changing the relevant settings will be enough. I hope
to post instructions when I get around to trying this myself.</p>
<p>In the meantime, I hope this is useful as a way of making IHaskell even more
widely available, and as a demonstration of using <code>dockerTools</code> to bridge the
gap between Nix and Docker!</p>
<p><em>Thanks to <a href="https://grahamc.com">Graham Christensen</a> for improving the Nix
expression to use <code>buildLayeredImage</code>.</em></p>
</summary>
</entry>
<entry>
    <title>Functional DevOps in a Dysfunctional World</title>
    <link href="https://vaibhavsagar.com/blog/2019/07/04/functional-devops/" />
    <id>https://vaibhavsagar.com/blog/2019/07/04/functional-devops/index.html</id>
    <published>2019-07-04</published>
    <updated>2019-07-04T00:00:00Z</updated>
    <summary type="html"><div class="info">
    Posted on  4 July 2019
    
</div>
<div class="info">
    
        Tags: <a title="All pages tagged &#39;programming&#39;." href="/blog/tags/programming/index.html">programming</a>, <a title="All pages tagged &#39;nix&#39;." href="/blog/tags/nix/index.html">nix</a>, <a title="All pages tagged &#39;devops&#39;." href="/blog/tags/devops/index.html">devops</a>
    
</div>

<p><em>This is a pseudo-transcript of <a href="https://www.youtube.com/watch?v=RsSNEkBGmj0">a presentation I gave at the linux.conf.au
2018 Real World Functional Programming
Miniconf</a>.</em></p>
<p>What is DevOps about? For me it’s about my relationship to the phrase</p>
<blockquote>
<p>It works on my machine.</p>
</blockquote>
<p>I’ve been guilty of saying this in the past, and quite frankly, it isn’t good
enough. After the development team has written their last line of code, some
amount of work still needs to happen in order for the software to deliver value.</p>
<p>A few jobs ago I was at a small web development shop, and my deployment
workflow was as follows:</p>
<ol type="1">
<li>Log on to the development server and take careful notes on how it had diverged from the production server.</li>
<li>Carefully set aside some time to ‘do the deploy’.</li>
<li>Log on to the production server and do a <code>git pull</code> to get the latest code changes.</li>
<li>Perform database migrations according to the notes you made earlier.</li>
<li>Manually make any other required changes.</li>
</ol>
<p>Despite my best efforts, I would inevitably run into issues whenever I did
this, resulting in site outages and frustrated clients. This was far from
ideal, but I wasn’t able to articulate why at the time.</p>
<p>I posit that a better deployment process has the following properties:</p>
<ul>
<li><p><strong>Automatic</strong>: instead of a manual multi-step process, it has a single step,
which can be performed automatically.</p></li>
<li><p><strong>Repeatable</strong>: instead of only being able to deploy to one lovingly
hand-maintained server, it can deploy reliably multiple times to multiple
servers.</p></li>
<li><p><strong>Idempotent</strong>: if the target is already in the desired state, no extra work
needs to be done.</p></li>
<li><p><strong>Reversible</strong>: if it turns out I made a mistake, I can go back to the
previous state.</p></li>
<li><p><strong>Atomic</strong>: an external observer can only see the new state or the old state,
not any intermediate state.</p></li>
</ul>
<p>I hope to demonstrate how the Nix suite of tools (Nix, NixOS, and NixOps)
fulfill these properties and provide a better DevOps experience.</p>
<p>To make things easier, I’m not assuming that you already run NixOS. Any Linux
distro should do, as long as you’ve <a href="https://nixos.org/nix/download.html">installed
Nix</a>. macOS users will be able to follow
along until I get to the NixOps section.</p>
<h2 id="shipping-it">Shipping it</h2>
<h3 id="packaging">Packaging</h3>
<p>Suppose we have been given a small Haskell app to get up and running:</p>
<p><em>Main.hs</em></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="pp">{-# LANGUAGE OverloadedStrings #-}</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Web.Scotty</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Data.Monoid</span><span> </span><span class="ot">(</span><span class="va">mconcat</span><span class="ot">)</span><span>

</span><span class="va">main</span><span> </span><span class="ot">=</span><span> </span><span class="va">scotty</span><span> </span><span class="dv">3000</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">get</span><span> </span><span class="st">&quot;/:word&quot;</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
        </span><span class="va">beam</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">param</span><span> </span><span class="st">&quot;word&quot;</span><span>
        </span><span class="va">html</span><span> </span><span class="op">$</span><span> </span><span class="va">mconcat</span><span> </span><span class="ot">[</span><span class="st">&quot;&lt;h1&gt;Scotty, &quot;</span><span class="ot">,</span><span> </span><span class="va">beam</span><span class="ot">,</span><span> </span><span class="st">&quot; me up!&lt;/h1&gt;&quot;</span><span class="ot">]</span></code></pre></div>
<p><em>blank-me-up.cabal</em></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="va">name</span><span class="ot">:</span><span>                </span><span class="va">blank</span><span class="op">-</span><span class="va">me</span><span class="op">-</span><span class="va">up</span><span>
</span><span class="va">version</span><span class="ot">:</span><span>             </span><span class="dv">0.1</span><span class="op">.</span><span class="dv">0.0</span><span>
</span><span class="va">license</span><span class="ot">:</span><span>             </span><span class="dt">BSD3</span><span>
</span><span class="va">build</span><span class="op">-</span><span class="kw">type</span><span class="ot">:</span><span>          </span><span class="dt">Simple</span><span>
</span><span class="va">cabal</span><span class="op">-</span><span class="va">version</span><span class="ot">:</span><span>       </span><span class="op">&gt;=</span><span class="dv">1.10</span><span>

</span><span class="va">executable</span><span> </span><span class="va">blank</span><span class="op">-</span><span class="va">me</span><span class="op">-</span><span class="va">up</span><span>
  </span><span class="va">main</span><span class="op">-</span><span class="va">is</span><span class="ot">:</span><span>             </span><span class="va">Main.hs</span><span>
  </span><span class="va">build</span><span class="op">-</span><span class="va">depends</span><span class="ot">:</span><span>       </span><span class="va">base</span><span> </span><span class="op">&gt;=</span><span class="dv">4.9</span><span> </span><span class="op">&amp;&amp;</span><span> </span><span class="op">&lt;</span><span class="dv">5</span><span>
                     </span><span class="ot">,</span><span> </span><span class="va">scotty</span><span>
  </span><span class="kw">default</span><span class="op">-</span><span class="va">language</span><span class="ot">:</span><span>    </span><span class="dt">Haskell2010</span></code></pre></div>
<p>(This example is taken straight from <a href="https://github.com/scotty-web/scotty/blob/306fee7121dc41a55bd4e9b785f8366198de7e3c/README.md#scotty-">Scotty’s
README</a>.)</p>
<p>Our first step is to build this app and quickly check that it works. We’ll need
Nix and <code>cabal2nix</code>, which turns <code>.cabal</code> files into configuration for the Nix
package manager. Assuming we’ve installed <code>cabal2nix</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-env <span class="at">-i</span> cabal2nix</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>a <span class="ex">lot</span> of output<span class="op">&gt;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">created</span> <span class="op">&lt;</span>number<span class="op">&gt;</span> symlinks in user environment</span></code></pre></div>
<p>How do we know it worked? Try <code>nix-env -q</code> (short for <code>--query</code>):</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-env <span class="at">-q</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">cabal2nix</span></span></code></pre></div>
<p>Okay, assuming the app is in the <code>app</code> subdirectory, let’s create a directory
called <code>nix</code> to store our <code>.nix</code> files and begin:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cd nix</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cabal2nix ../app/ <span class="at">--shell</span> <span class="op">&gt;</span> default.nix</span></code></pre></div>
<p><code>default.nix</code> might look something like</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">nixpkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{},</span> <span class="va">compiler</span> <span class="op">?</span> <span class="st">&quot;default&quot;</span> <span class="op">}</span>:</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">inherit</span> (<span class="va">nixpkgs</span>) <span class="va">pkgs</span>;</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">f</span> <span class="op">=</span> <span class="op">{</span> <span class="va">mkDerivation</span><span class="op">,</span> <span class="va">base</span><span class="op">,</span> <span class="va">scotty</span><span class="op">,</span> <span class="va">stdenv</span> <span class="op">}</span>:</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>      mkDerivation <span class="op">{</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;blank-me-up&quot;</span><span class="op">;</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;0.1.0.0&quot;</span><span class="op">;</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>        <span class="va">src</span> <span class="op">=</span> <span class="ss">../app</span><span class="op">;</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>        <span class="va">isLibrary</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>        <span class="va">isExecutable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>        <span class="va">executableHaskellDepends</span> <span class="op">=</span> <span class="op">[</span> base scotty <span class="op">];</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>        <span class="va">license</span> <span class="op">=</span> stdenv.lib.licenses.bsd3<span class="op">;</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>  <span class="va">haskellPackages</span> <span class="op">=</span> <span class="kw">if</span> compiler == <span class="st">&quot;default&quot;</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>                       <span class="kw">then</span> pkgs.haskellPackages</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>                       <span class="kw">else</span> pkgs.haskell.packages.$<span class="op">{</span><span class="va">compiler</span><span class="op">};</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>  <span class="va">drv</span> <span class="op">=</span> haskellPackages.callPackage f <span class="op">{};</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>  <span class="kw">if</span> pkgs.lib.inNixShell <span class="kw">then</span> drv.env <span class="kw">else</span> drv</span></code></pre></div>
<p>Now we can build our project by running <code>nix-build</code>, which tries to build
<code>default.nix</code> in the current directory if no arguments are provided:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-build</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>lots <span class="ex">of</span> output<span class="op">&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/</span><span class="op">&lt;</span>hash<span class="op">&gt;</span>-blank-me-up-0.1.0.0</span></code></pre></div>
<p>There should also be a new <code>result</code> symlink in the current directory, which
points to the path above:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> readlink result</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/</span><span class="op">&lt;</span>hash<span class="op">&gt;</span>-blank-me-up-0.1.0.0</span></code></pre></div>
<p>Notice that we’ve built a Haskell executable without having to directly deal
with any Haskell-specific tooling (unless you count <code>cabal2nix</code>). Nix works
best if you allow it full control over builds, as we do here.</p>
<p>What happens if we run <code>nix-build</code> again without changing anything?</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-build</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/</span><span class="op">&lt;</span>hash<span class="op">&gt;</span>-blank-me-up-0.1.0.0</span></code></pre></div>
<p>It should be nearly instantaneous and not require rebuilding anything. Nix
tries to think of build outputs as a pure function of its inputs, and since our
inputs are unchanged, it is able to give us back the same path that it did
before. This is what I mean when I say Nix is declarative.</p>
<p>What if we break our app:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/functional-devops/app/Main.hs</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/functional-devops/app/Main.hs</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -4,6 +4,8 @@ import Web.Scotty</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a> import Data.Monoid (mconcat)</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="va">+broken</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a> main = scotty 3000 $ do</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>     get &quot;/:word&quot; $ do</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>         beam &lt;- param &quot;word&quot;</span></code></pre></div>
<p>and try to build again?</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-build</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>...<span class="op">&gt;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> executable <span class="st">&#39;blank-me-up&#39;</span> for blank-me-up-0.1.0.0..</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="ex">[1</span> of 1] Compiling Main             <span class="er">(</span> <span class="ex">Main.hs,</span> dist/build/blank-me-up/blank-me-up-tmp/Main.o <span class="kw">)</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="ex">Main.hs:7:1:</span> error:</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Parse</span> error: module header, import declaration</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    <span class="ex">or</span> top-level declaration expected.</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span> <span class="kw">|</span> <span class="ex">broken</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span> <span class="ex">^^^^^^</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="ex">builder</span> for <span class="st">&#39;/nix/store/&lt;hash&gt;-blank-me-up-0.1.0.0.drv&#39;</span> failed with exit code 1</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="ex">error:</span> build of <span class="st">&#39;/nix/store/&lt;hash&gt;-blank-me-up-0.1.0.0.drv&#39;</span> failed</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>...<span class="op">&gt;</span></span></code></pre></div>
<p>It fails, as one would hope, but more importantly the previous symlink at
<code>result</code> is still available! This is because <code>nix-build</code> completes the build
before atomically updating the symlink at <code>result</code> to point to the new
artifact. This way, we can move from one known working state to another,
without exposing our users to any intermediate brokenness.</p>
<h3 id="service-configuration">Service Configuration</h3>
<p>Okay, now that we’re able to successfully build the app, let’s configure a
service file so that <code>systemd</code> can manage our app. I don’t know of any tools
that automatically generate this so I always find myself copying and pasting
from an existing service file. Here’s one I prepared earlier.</p>
<p><em>nix/service.nix</em></p>
<div class="sourceCode" id="cb10"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">lib</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:                                               <span class="co">#1</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span>                                                                       <span class="co">#2</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">blank-me-up</span> <span class="op">=</span> pkgs.callPackage <span class="ss">./default.nix</span> <span class="op">{};</span>                        <span class="co">#3</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span> <span class="op">{</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>  <span class="va">options</span>.<span class="va">services</span>.<span class="va">blank-me-up</span>.<span class="va">enable</span> <span class="op">=</span> lib.mkEnableOption <span class="st">&quot;Blank Me Up&quot;</span><span class="op">;</span> <span class="co">#4</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>  <span class="va">config</span> <span class="op">=</span> lib.mkIf config.services.blank<span class="op">-</span>me<span class="op">-</span>up.enable <span class="op">{</span>                  <span class="co">#5</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    <span class="va">networking</span>.<span class="va">firewall</span>.<span class="va">allowedTCPPorts</span> <span class="op">=</span> <span class="op">[</span> <span class="dv">3000</span> <span class="op">];</span>                       <span class="co">#6</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    <span class="va">systemd</span>.<span class="va">services</span>.<span class="va">blank-me-up</span> <span class="op">=</span> <span class="op">{</span>                                      <span class="co">#7</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>      <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;Blank Me Up&quot;</span><span class="op">;</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>      <span class="va">after</span> <span class="op">=</span> <span class="op">[</span> <span class="st">&quot;network.target&quot;</span> <span class="op">];</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>      <span class="va">wantedBy</span> <span class="op">=</span> <span class="op">[</span> <span class="st">&quot;multi-user.target&quot;</span> <span class="op">];</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>      <span class="va">serviceConfig</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>        <span class="va">ExecStart</span> <span class="op">=</span> <span class="st">&quot;</span><span class="sc">${</span>blank<span class="op">-</span>me<span class="op">-</span>up<span class="sc">}</span><span class="st">/bin/blank-me-up&quot;</span><span class="op">;</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>        <span class="va">Restart</span> <span class="op">=</span> <span class="st">&quot;always&quot;</span><span class="op">;</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>        <span class="va">KillMode</span> <span class="op">=</span> <span class="st">&quot;process&quot;</span><span class="op">;</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This isn’t intended to be a Nix language tutorial, but there are a few
interesting things that I want to point out. For a more comprehensive overview
of the language, see
<a href="https://medium.com/@MrJamesFisher/nix-by-example-a0063a1a4c55">here</a> or
<a href="https://nixos.org/nix/manual/#ch-expression-language">here</a>.</p>
<ol type="1">
<li>These are the arguments to this expression that the caller will pass.
Another way to think of this is as a form of dependency injection.</li>
<li><code>let</code> expressions work similarly to Haskell.</li>
<li>This is the equivalent of our <code>nix-build</code> from before.</li>
<li>We define a single option that enables our service.</li>
<li>The <code>config</code> attribute contains service configuration.</li>
<li>We expose port 3000.</li>
<li>If you squint this looks a lot like a regular unit file. More on this below.</li>
</ol>
<p>It would be useful to look at the systemd service file that gets generated
from this configuration. To do this, we’ll need one more file:</p>
<p><em>ops/webserver.nix</em></p>
<div class="sourceCode" id="cb11"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="op">...</span> <span class="op">}</span>: <span class="op">{</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">imports</span> <span class="op">=</span> <span class="op">[</span> <span class="ss">../nix/service.nix</span> <span class="op">];</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">services</span>.<span class="va">blank-me-up</span>.<span class="va">enable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This is a function that imports the above configuration and enables the
<code>blank-me-up</code> service. With this in place, we can do</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-instantiate <span class="at">--eval</span> <span class="at">-E</span> <span class="st">&#39;(import &lt;nixpkgs/nixos/lib/eval-config.nix&gt; { modules = [./ops/webserver.nix]; }).config.systemd.units.&quot;blank-me-up.service&quot;.text&#39;</span></span></code></pre></div>
<p>We’re using <code>nix-instantiate</code> to evaluate (<code>--eval</code>) an expression (<code>-E</code>) that
uses <code>eval-config.nix</code> from the library to import the file we created and
output the text of the final unit file. The output of this is pretty messy, but
we can use <code>jq</code> to clean it up:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-instantiate <span class="at">--eval</span> <span class="at">-E</span> <span class="st">&#39;(import &lt;nixpkgs/nixos/lib/eval-config.nix&gt; { modules = [./ops/webserver.nix]; }).config.systemd.units.&quot;blank-me-up.service&quot;.text&#39;</span> <span class="kw">|</span> <span class="ex">jq</span> <span class="at">-r</span></span></code></pre></div>
<p>Here’s what that looks like on my machine:</p>
<details>
<summary style="cursor: pointer;">
Generated <code>systemd</code> service
</summary>
<div class="sourceCode" id="cb14"><pre class="sourceCode default"><code class="sourceCode default"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>[Unit]</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>After=network.target</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>Description=Blank Me Up</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>[Service]</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>Environment=&quot;LOCALE_ARCHIVE=/nix/store/&lt;hash&gt;-glibc-locales-2.27/lib/locale/locale-archive&quot;</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>Environment=&quot;PATH=/nix/store/&lt;hash&gt;-coreutils-8.30/bin:/nix/store/&lt;hash&gt;-findutils-4.6.0/bin:/nix/store/&lt;hash&gt;-gnugrep-3.3/bin:/nix/store/&lt;hash&gt;-gnused-4.7/bin:/nix/store/&lt;hash&gt;-systemd-239.20190219/bin:/nix/store/&lt;hash&gt;-coreutils-8.30/sbin:/nix/store/&lt;hash&gt;-findutils-4.6.0/sbin:/nix/store/&lt;hash&gt;-gnugrep-3.3/sbin:/nix/store/&lt;hash&gt;-gnused-4.7/sbin:/nix/store/&lt;hash&gt;-systemd-239.20190219/sbin&quot;</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>Environment=&quot;TZDIR=/nix/store/&lt;hash&gt;-tzdata-2019a/share/zoneinfo&quot;</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>ExecStart=/nix/store/&lt;hash&gt;-blank-me-up-0.1.0.0/bin/blank-me-up</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>KillMode=process</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>Restart=always</span></code></pre></div>
</details>
<p>Hopefully at this point you’re convinced that Nix can take some quasi-JSON and
turn it into a binary and a <code>systemd</code> service file. Let’s deploy this!</p>
<h3 id="deploying">Deploying</h3>
<p>First, we install NixOps:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-env <span class="at">-i</span> nixops</span></code></pre></div>
<p>We also have to set up VirtualBox, which I’ll be using as my deploy target. If
you’re using NixOS this is as simple as adding the following line to
<code>configuration.nix</code>:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>virtualisation.virtualbox.host.enable = <span class="cn">true</span>;</span></code></pre></div>
<p>and running <code>sudo nixos-rebuild switch</code>. If you’re using another Linux distro,
install VirtualBox and set up a host-only network called <code>vboxnet0</code>.</p>
<p>We’ll be using the <a href="https://nixos.org/nixops/manual/#idm140737318606176">instructions from the
manual</a> as our starting
point. Create two files:</p>
<p><em>ops/trivial.nix</em></p>
<div class="sourceCode" id="cb17"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">network</span>.<span class="va">description</span> <span class="op">=</span> <span class="st">&quot;Web server&quot;</span><span class="op">;</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">network</span>.<span class="va">enableRollback</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">webserver</span> <span class="op">=</span> <span class="bu">import</span> <span class="ss">./webserver.nix</span><span class="op">;</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><em>ops/trivial-vbox.nix</em></p>
<div class="sourceCode" id="cb18"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">webserver</span> <span class="op">=</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span> <span class="va">deployment</span>.<span class="va">targetEnv</span> <span class="op">=</span> <span class="st">&quot;virtualbox&quot;</span><span class="op">;</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>      <span class="va">deployment</span>.<span class="va">virtualbox</span>.<span class="va">headless</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span> <span class="co"># don&#39;t show a display</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>      <span class="va">deployment</span>.<span class="va">virtualbox</span>.<span class="va">memorySize</span> <span class="op">=</span> <span class="dv">1024</span><span class="op">;</span> <span class="co"># megabytes</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>      <span class="va">deployment</span>.<span class="va">virtualbox</span>.<span class="va">vcpu</span> <span class="op">=</span> <span class="dv">2</span><span class="op">;</span> <span class="co"># number of cpus</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>We should now be able to create a new deployment:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cd ops</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nixops create trivial.nix trivial-vbox.nix <span class="at">-d</span> trivial</span></code></pre></div>
<p>and deploy it:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nixops deploy <span class="at">-d</span> trivial</span></code></pre></div>
<p>and assuming that everything goes well, we should see a lot of terminal output
and at least one mention of <code>ssh://root@&lt;ip&gt;</code>, which is the IP of our target.</p>
<p>We should then be able to go to <code>http://&lt;ip&gt;:3000</code> and see our web app in
action!</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> curl http://<span class="op">&lt;</span>ip<span class="op">&gt;</span>:3000/help</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>h1<span class="op">&gt;</span>Scotty, <span class="bu">help</span> me up!<span class="op">&lt;</span>/h1<span class="op">&gt;</span></span></code></pre></div>
<p>NixOps also allows us to SSH in for troubleshooting purposes or to view logs:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nixops ssh <span class="at">-d</span> trivial webserver</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>...<span class="op">&gt;</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="ex">[root@webserver:~]#</span> systemctl status blank-me-up</span></code></pre></div>
<h2 id="responding-to-change">Responding to change</h2>
<p>This is fantastic, but deployments are rarely fire-and-forget. What happens
when our requirements change? In fact, there’s a serious issue with our
application, which is that it hardcodes the port that it listens on. If we
wanted it to listen on a different port, or to run more than one instance of it
on the same machine, we’d need to do something differently.</p>
<p>The correct solution would be to talk to the developers and have them implement
support, but in the meantime, how should we proceed?</p>
<h3 id="patching">Patching</h3>
<p>Nix gives us full control over each part of the build and deployment process,
and we can patch the software as a stopgap measure. Although this scenario is
somewhat contrived, I have in fact had to take matters into my own hands like
this in the past when the development team hasn’t been able to prioritise
fixing a production issue.</p>
<p>Our new expression looks like this:</p>
<p><em>nix/patched.nix</em></p>
<div class="sourceCode" id="cb23"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a>args@<span class="op">{</span> <span class="va">nixpkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{},</span> <span class="va">compiler</span> <span class="op">?</span> <span class="st">&quot;default&quot;</span> <span class="op">}</span>:</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="op">(</span><span class="bu">import</span> <span class="ss">./default.nix</span> args<span class="op">)</span>.overrideAttrs <span class="op">(</span><span class="va">old</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">postPatch</span> <span class="op">=</span> <span class="kw">let</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">oldImport</span> <span class="op">=</span> <span class="st">&#39;&#39;</span></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a><span class="st">      import Web.Scotty</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a><span class="st">    &#39;&#39;</span><span class="op">;</span></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">newImport</span> <span class="op">=</span> <span class="st">&#39;&#39;</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a><span class="st">      import Web.Scotty</span></span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a><span class="st">      import System.Environment (getArgs)</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a><span class="st">    &#39;&#39;</span><span class="op">;</span></span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a>    <span class="va">oldMain</span> <span class="op">=</span> <span class="st">&#39;&#39;</span></span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a><span class="st">      main = scotty 3000 $ do</span></span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a><span class="st">    &#39;&#39;</span><span class="op">;</span></span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a>    <span class="va">newMain</span> <span class="op">=</span> <span class="st">&#39;&#39;</span></span>
<span id="cb23-16"><a href="#cb23-16" aria-hidden="true" tabindex="-1"></a><span class="st">      main = getArgs &gt;&gt;= \(port:_) -&gt; scotty (read port) $ do</span></span>
<span id="cb23-17"><a href="#cb23-17" aria-hidden="true" tabindex="-1"></a><span class="st">    &#39;&#39;</span><span class="op">;</span></span>
<span id="cb23-18"><a href="#cb23-18" aria-hidden="true" tabindex="-1"></a>  <span class="kw">in</span> <span class="st">&#39;&#39;</span></span>
<span id="cb23-19"><a href="#cb23-19" aria-hidden="true" tabindex="-1"></a><span class="st">    substituteInPlace Main.hs --replace &#39;</span><span class="sc">${</span>oldImport<span class="sc">}</span><span class="st">&#39; &#39;</span><span class="sc">${</span>newImport<span class="sc">}</span><span class="st">&#39;</span></span>
<span id="cb23-20"><a href="#cb23-20" aria-hidden="true" tabindex="-1"></a><span class="st">    substituteInPlace Main.hs --replace &#39;</span><span class="sc">${</span>oldMain<span class="sc">}</span><span class="st">&#39;   &#39;</span><span class="sc">${</span>newMain<span class="sc">}</span><span class="st">&#39;</span></span>
<span id="cb23-21"><a href="#cb23-21" aria-hidden="true" tabindex="-1"></a><span class="st">    cat Main.hs</span></span>
<span id="cb23-22"><a href="#cb23-22" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb23-23"><a href="#cb23-23" aria-hidden="true" tabindex="-1"></a><span class="op">})</span></span></code></pre></div>
<p>I’ve added that <code>cat Main.hs</code> at the end to</p>
<ul>
<li>confirm that the file was correctly patched</li>
<li>emphasise that arbitrary shell commands can be executed</li>
</ul>
<p>We can create a new service definition to use this expression:</p>
<p><em>nix/service-patched.nix</em></p>
<div class="sourceCode" id="cb24"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">lib</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">blank-me-up</span> <span class="op">=</span> pkgs.callPackage <span class="ss">./patched.nix</span> <span class="op">{</span> <span class="va">nixpkgs</span> <span class="op">=</span> pkgs<span class="op">;</span> <span class="op">};</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">cfg</span> <span class="op">=</span> config.services.blank<span class="op">-</span>me<span class="op">-</span>up<span class="op">;</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span> <span class="op">{</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">options</span>.<span class="va">services</span>.<span class="va">blank-me-up</span>.<span class="va">enable</span> <span class="op">=</span> lib.mkEnableOption <span class="st">&quot;Blank Me Up&quot;</span><span class="op">;</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a>  <span class="va">options</span>.<span class="va">services</span>.<span class="va">blank-me-up</span>.<span class="va">port</span> <span class="op">=</span> lib.mkOption <span class="op">{</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a>    <span class="va">default</span> <span class="op">=</span> <span class="dv">3000</span><span class="op">;</span></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a>    <span class="va">type</span> <span class="op">=</span> lib.types.int<span class="op">;</span></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a>  <span class="va">config</span> <span class="op">=</span> lib.mkIf cfg.enable <span class="op">{</span></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a>    <span class="va">networking</span>.<span class="va">firewall</span>.<span class="va">allowedTCPPorts</span> <span class="op">=</span> <span class="op">[</span> cfg.port <span class="op">];</span></span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">systemd</span>.<span class="va">services</span>.<span class="va">blank-me-up</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true" tabindex="-1"></a>      <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;Blank Me Up&quot;</span><span class="op">;</span></span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true" tabindex="-1"></a>      <span class="va">after</span> <span class="op">=</span> <span class="op">[</span> <span class="st">&quot;network.target&quot;</span> <span class="op">];</span></span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true" tabindex="-1"></a>      <span class="va">wantedBy</span> <span class="op">=</span> <span class="op">[</span> <span class="st">&quot;multi-user.target&quot;</span> <span class="op">];</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true" tabindex="-1"></a>      <span class="va">serviceConfig</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb24-21"><a href="#cb24-21" aria-hidden="true" tabindex="-1"></a>        <span class="va">ExecStart</span> <span class="op">=</span> <span class="st">&quot;</span><span class="sc">${</span>blank<span class="op">-</span>me<span class="op">-</span>up<span class="sc">}</span><span class="st">/bin/blank-me-up </span><span class="sc">${</span><span class="bu">toString</span> cfg.port<span class="sc">}</span><span class="st">&quot;</span><span class="op">;</span></span>
<span id="cb24-22"><a href="#cb24-22" aria-hidden="true" tabindex="-1"></a>        <span class="va">Restart</span> <span class="op">=</span> <span class="st">&quot;always&quot;</span><span class="op">;</span></span>
<span id="cb24-23"><a href="#cb24-23" aria-hidden="true" tabindex="-1"></a>        <span class="va">KillMode</span> <span class="op">=</span> <span class="st">&quot;process&quot;</span><span class="op">;</span></span>
<span id="cb24-24"><a href="#cb24-24" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb24-25"><a href="#cb24-25" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb24-26"><a href="#cb24-26" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb24-27"><a href="#cb24-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>We make sure to pass the configured port in on startup and open the firewall
appropriately.</p>
<h3 id="deploying-again">Deploying (Again)</h3>
<p>We update <code>webserver.nix</code> to use the patched service and specify a different
port:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="op">...</span> <span class="op">}</span>: <span class="op">{</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">imports</span> <span class="op">=</span> <span class="op">[</span> <span class="ss">../nix/service-patched.nix</span> <span class="op">];</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">services</span>.<span class="va">blank-me-up</span>.<span class="va">enable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">services</span>.<span class="va">blank-me-up</span>.<span class="va">port</span> <span class="op">=</span> <span class="dv">3001</span><span class="op">;</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>And we can deploy again!</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nixops deploy <span class="at">-d</span> trivial</span></code></pre></div>
<p>The service should now be running on <code>http://&lt;ip&gt;:3001</code> instead of
<code>http://&lt;ip&gt;:3000</code>.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> curl http://<span class="op">&lt;</span>ip<span class="op">&gt;</span>:3001/pull</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>h1<span class="op">&gt;</span>Scotty, <span class="ex">pull</span> me up!<span class="op">&lt;</span>/h1<span class="op">&gt;</span></span></code></pre></div>
<p>If we made a mistake, rolling back is easy:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nixops list-generations <span class="at">-d</span> trivial</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>   <span class="ex">1</span>   <span class="op">&lt;</span>timestamp<span class="op">&gt;</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>   <span class="ex">2</span>   <span class="op">&lt;</span>timestamp<span class="op">&gt;</span>   <span class="er">(</span><span class="ex">current</span><span class="kw">)</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nixops rollback <span class="at">-d</span> trivial 1</span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="ex">switching</span> from generation 2 to 1</span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a><span class="ex">webserver</span><span class="op">&gt;</span> copying closure...</span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a><span class="ex">trivial</span><span class="op">&gt;</span> closures copied successfully</span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>more <span class="ex">output</span><span class="op">&gt;</span></span></code></pre></div>
<p>and in fact nothing needs to be copied to the target, because the previous
deployment is still there.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As demonstrated, the Nix ecosystem allows us to impose order on the usually
messy and ad-hoc practice of packaging and deploying software at scale. I’m
satisfied that this is the way forward and hope that you will consider using
these tools to tackle problems of your own!</p>
</summary>
</entry>
<entry>
    <title>Hacking on GHC Has Never Been Easier!</title>
    <link href="https://vaibhavsagar.com/blog/2019/06/22/easy-ghc-hacking/" />
    <id>https://vaibhavsagar.com/blog/2019/06/22/easy-ghc-hacking/index.html</id>
    <published>2019-06-22</published>
    <updated>2019-06-22T00:00:00Z</updated>
    <summary type="html"><div class="info">
    Posted on 22 June 2019
    
</div>
<div class="info">
    
        Tags: <a title="All pages tagged &#39;haskell&#39;." href="/blog/tags/haskell/index.html">haskell</a>, <a title="All pages tagged &#39;nix&#39;." href="/blog/tags/nix/index.html">nix</a>, <a title="All pages tagged &#39;programming&#39;." href="/blog/tags/programming/index.html">programming</a>
    
</div>

<p>At ZuriHac 2019 <a href="https://github.com/mpickering">Matthew Pickering</a> talked about
<a href="https://www.youtube.com/watch?v=Q2ZDovqIxCw">tools for working on GHC</a>.
There’s <a href="https://mpickering.github.io/posts/2019-06-11-ghc-tools.html">an associated blog
post</a> which is
also well worth reading.</p>
<p>I wanted to focus on a small part of his presentation, which is about loading
<a href="https://gitlab.haskell.org/ghc/ghc/wikis/building/in-ghci">GHC into GHCi</a> and
using <a href="https://github.com/ndmitchell/ghcid"><code>ghcid</code></a> to automatically reload
GHC on changes. This has been possible for almost a year now, <a href="https://mgsloan.com/posts/ghcinception/">as described in
this blog post by Michael Sloan</a>. It
has since been improved to be even easier to use!</p>
<p>Putting this together with <a href="https://github.com/alpmestan/ghc.nix">Alp Mestanogullari’s
<code>ghc.nix</code></a>, it’s now possible to
provision a GHC development environment from scratch with just a few commands,
assuming that you have <code>nix-shell</code>, <code>cabal-install</code>, and <code>ghcid</code> installed.
Here they are:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> git clone <span class="at">--recursive</span> https://gitlab.haskell.org/ghc/ghc/</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cd ghc</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> git clone https://github.com/alpmestan/ghc.nix</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cabal update</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell ghc.nix/ <span class="at">--run</span> <span class="st">&#39;./boot &amp;&amp; ./configure &amp;&amp; ghcid&#39;</span></span></code></pre></div>
<p>This will take a while the first time, but <code>ghcid</code> will cache generated
artifacts under <code>./hadrian_ghci</code> so even quitting and reloading will be
significantly faster.</p>
<p>Congratulations, you are now a GHC developer!</p>
</summary>
</entry>
<entry>
    <title>Refactoring Haskell: A Case Study</title>
    <link href="https://vaibhavsagar.com/blog/2019/02/12/refactoring-haskell/" />
    <id>https://vaibhavsagar.com/blog/2019/02/12/refactoring-haskell/index.html</id>
    <published>2019-02-12</published>
    <updated>2019-02-12T00:00:00Z</updated>
    <summary type="html"><div class="info">
    Posted on 12 February 2019
    
</div>
<div class="info">
    
        Tags: <a title="All pages tagged &#39;programming&#39;." href="/blog/tags/programming/index.html">programming</a>, <a title="All pages tagged &#39;haskell&#39;." href="/blog/tags/haskell/index.html">haskell</a>
    
</div>

<p>Many people claim that <a href="https://twitter.com/search?q=haskell%20refactoring">refactoring Haskell is a
joy</a>. I’ve certainly found
this to be the case, but what does that mean in practice? I thought it might be
useful to demonstrate by refactoring some of my own code.</p>
<p>The code we’re looking at today is an implementation of <a href="https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm">Tarjan’s Strongly
Connected Components
algorithm</a>
used to determine whether a given <a href="https://en.wikipedia.org/wiki/2-satisfiability">2-SAT
problem</a> is satisfiable or not,
and was written to complete <a href="https://online.stanford.edu/course/algorithms-design-and-analysis-part-1">an online
course</a>
that is now offered in a different form. I’ve <a href="/blog/2017/06/10/dag-toolkit/">written about Tarjan’s algorithm
previously</a> and it can be
used to determine the satisfiability of a 2-SAT problem by checking if any SCC
contains both a variable and its negation. If it does, we have a contradiction
and the problem is unsatisfiable, otherwise the problem is satisfiable.</p>
<p>This code isn’t particularly elegant or easy to follow, and it’s lousy with
mutable state. Despite these drawbacks, it is still relatively straightforward
to refactor.</p>
<p>If you’d like to follow along, I have the code (and some test data) available
<a href="https://gist.github.com/vaibhavsagar/2418c9dd79da431065ad0d80e690b12f">at this
gist</a>
with each revision representing a refactoring step.</p>
<p>The initial version of the code is as follows:</p>
<details>
<summary style="cursor: pointer">
Initial 2SAT.hs
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="pp">{-# LANGUAGE LambdaCase #-}</span><span>

</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Graph</span><span>      </span><span class="kw">as</span><span> </span><span class="dt">G</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Map.Strict</span><span> </span><span class="kw">as</span><span> </span><span class="dt">M</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Set</span><span>        </span><span class="kw">as</span><span> </span><span class="dt">S</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Array</span><span>      </span><span class="kw">as</span><span> </span><span class="dt">A</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Prelude</span><span>         </span><span class="kw">as</span><span> </span><span class="dt">P</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Prelude</span><span> </span><span class="kw">hiding</span><span> </span><span class="ot">(</span><span class="va">lookup</span><span class="ot">)</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad.ST</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.STRef</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad</span><span> </span><span class="ot">(</span><span class="va">forM_</span><span class="ot">,</span><span> </span><span class="va">when</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.Maybe</span><span> </span><span class="ot">(</span><span class="va">isJust</span><span class="ot">,</span><span> </span><span class="va">isNothing</span><span class="ot">,</span><span> </span><span class="va">fromJust</span><span class="ot">)</span><span>

</span><span class="va">tarjan</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="dt">S.Set</span><span> </span><span class="dt">Int</span><span class="ot">]</span><span>
</span><span class="va">tarjan</span><span> </span><span class="va">n</span><span> </span><span class="va">graph</span><span> </span><span class="ot">=</span><span> </span><span class="va">runST</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">index</span><span>    </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="dv">0</span><span>
    </span><span class="va">stack</span><span>    </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">[</span><span class="ot">]</span><span>
    </span><span class="va">stackSet</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="va">S.empty</span><span>
    </span><span class="va">indices</span><span>  </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="va">M.empty</span><span>
    </span><span class="va">lowlinks</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="va">M.empty</span><span>
    </span><span class="va">output</span><span>   </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="ot">[</span><span class="ot">]</span><span class="ot">)</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">G.vertices</span><span> </span><span class="va">graph</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">v</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
        </span><span class="va">vIndex</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">M.lookup</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">indices</span><span>
        </span><span class="va">when</span><span> </span><span class="ot">(</span><span class="va">isNothing</span><span> </span><span class="va">vIndex</span><span class="ot">)</span><span> </span><span class="op">$</span><span>
            </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span>

    </span><span class="va">readSTRef</span><span> </span><span class="va">output</span><span>

</span><span class="va">strongConnect</span><span>
    </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">S.Set</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">M.Map</span><span> </span><span class="dt">Int</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">M.Map</span><span> </span><span class="dt">Int</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="dt">S.Set</span><span> </span><span class="dt">Int</span><span class="ot">]</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span>    </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">i</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">index</span><span>
    </span><span class="va">insert</span><span> </span><span class="va">v</span><span> </span><span class="va">i</span><span> </span><span class="va">indices</span><span>
    </span><span class="va">insert</span><span> </span><span class="va">v</span><span> </span><span class="va">i</span><span> </span><span class="va">lowlinks</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">index</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="dv">1</span><span class="ot">)</span><span>
    </span><span class="va">push</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">v</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">graph</span><span> </span><span class="op">A.!</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">lookup</span><span> </span><span class="va">w</span><span> </span><span class="va">indices</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="ot">case</span><span>
        </span><span class="dt">Nothing</span><span>     </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span>
            </span><span class="va">vLowLink</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">lookup</span><span> </span><span class="va">v</span><span> </span><span class="va">lowlinks</span><span>
            </span><span class="va">wLowLink</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">lookup</span><span> </span><span class="va">w</span><span> </span><span class="va">lowlinks</span><span>
            </span><span class="va">insert</span><span> </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="va">vLowLink</span><span> </span><span class="va">wLowLink</span><span class="ot">)</span><span> </span><span class="va">lowlinks</span><span>
        </span><span class="dt">Just</span><span> </span><span class="va">wIndex</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">wOnStack</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">S.member</span><span> </span><span class="va">w</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">stackSet</span><span>
            </span><span class="va">when</span><span> </span><span class="va">wOnStack</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
                </span><span class="va">vLowLink</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">lookup</span><span> </span><span class="va">v</span><span> </span><span class="va">lowlinks</span><span>
                </span><span class="va">insert</span><span> </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="va">vLowLink</span><span> </span><span class="va">wIndex</span><span class="ot">)</span><span> </span><span class="va">lowlinks</span><span>

    </span><span class="va">vLowLink</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">lookup</span><span> </span><span class="va">v</span><span> </span><span class="va">lowlinks</span><span>
    </span><span class="va">vIndex</span><span>   </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">lookup</span><span> </span><span class="va">v</span><span> </span><span class="va">indices</span><span>
    </span><span class="va">when</span><span> </span><span class="ot">(</span><span class="va">vLowLink</span><span> </span><span class="op">==</span><span> </span><span class="va">vIndex</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
        </span><span class="va">scc</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">S.empty</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span>
        </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">output</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">sccs</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="ot">(</span><span class="ot">:</span><span class="ot">)</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">scc</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">sccs</span><span>
    </span><span class="kw">where</span><span>
        </span><span class="va">lookup</span><span> </span><span class="va">value</span><span> </span><span class="va">hashMap</span><span>     </span><span class="ot">=</span><span> </span><span class="va">M.lookup</span><span> </span><span class="va">value</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">hashMap</span><span>
        </span><span class="va">insert</span><span> </span><span class="va">key</span><span> </span><span class="va">value</span><span> </span><span class="va">hashMap</span><span> </span><span class="ot">=</span><span> </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">hashMap</span><span> </span><span class="ot">(</span><span class="va">M.insert</span><span> </span><span class="va">key</span><span> </span><span class="va">value</span><span class="ot">)</span><span>

</span><span class="va">addSCC</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">S.Set</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">S.Set</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">(</span><span class="dt">S.Set</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span class="ot">)</span><span>
</span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="ot">=</span><span> </span><span class="va">pop</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">if</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span class="ot">)</span><span> </span><span class="ot">`</span><span class="va">S.member</span><span class="ot">`</span><span> </span><span class="va">scc</span><span class="ot">)</span><span> </span><span class="kw">then</span><span> </span><span class="va">return</span><span> </span><span class="dt">Nothing</span><span> </span><span class="kw">else</span><span>
    </span><span class="kw">let</span><span> </span><span class="va">scc&#39;</span><span> </span><span class="ot">=</span><span> </span><span class="va">S.insert</span><span> </span><span class="va">w</span><span> </span><span class="va">scc</span><span>
    </span><span class="kw">in</span><span> </span><span class="kw">if</span><span> </span><span class="va">w</span><span> </span><span class="op">==</span><span> </span><span class="va">v</span><span> </span><span class="kw">then</span><span> </span><span class="va">return</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">scc&#39;</span><span class="ot">)</span><span> </span><span class="kw">else</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span>

</span><span class="va">push</span><span> </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">S.Set</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">push</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span>    </span><span class="ot">(</span><span class="va">e</span><span class="ot">:</span><span class="ot">)</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stackSet</span><span> </span><span class="ot">(</span><span class="va">S.insert</span><span> </span><span class="va">e</span><span class="ot">)</span><span>

</span><span class="va">pop</span><span> </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">S.Set</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
</span><span class="va">pop</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">e</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">head</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">stack</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="va">tail</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stackSet</span><span> </span><span class="ot">(</span><span class="va">S.delete</span><span> </span><span class="va">e</span><span class="ot">)</span><span>
    </span><span class="va">return</span><span> </span><span class="va">e</span><span>

</span><span class="va">denormalise</span><span>     </span><span class="ot">=</span><span> </span><span class="va">subtract</span><span>
</span><span class="va">normalise</span><span>       </span><span class="ot">=</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="ot">)</span><span>
</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span>       </span><span class="ot">=</span><span> </span><span class="dv">2</span><span class="ot">*</span><span class="va">n</span><span> </span><span class="op">-</span><span> </span><span class="va">v</span><span>
</span><span class="va">clauses</span><span> </span><span class="va">n</span><span> </span><span class="ot">[</span><span class="va">u</span><span class="ot">,</span><span class="va">v</span><span class="ot">]</span><span> </span><span class="ot">=</span><span> </span><span class="ot">[</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">u</span><span class="ot">,</span><span> </span><span class="va">v</span><span class="ot">)</span><span class="ot">,</span><span> </span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span class="ot">,</span><span> </span><span class="va">u</span><span class="ot">)</span><span class="ot">]</span><span>

</span><span class="va">checkSat</span><span> </span><span class="ot">::</span><span> </span><span class="dt">String</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">IO</span><span> </span><span class="dt">Bool</span><span>
</span><span class="va">checkSat</span><span> </span><span class="va">name</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">p</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="va">P.read</span><span> </span><span class="op">.</span><span> </span><span class="va">words</span><span class="ot">)</span><span> </span><span class="op">.</span><span> </span><span class="va">lines</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readFile</span><span> </span><span class="va">name</span><span>
    </span><span class="kw">let</span><span> </span><span class="va">pNo</span><span>    </span><span class="ot">=</span><span> </span><span class="va">head</span><span> </span><span class="op">$</span><span> </span><span class="va">head</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pn</span><span>     </span><span class="ot">=</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">normalise</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tail</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pGraph</span><span> </span><span class="ot">=</span><span> </span><span class="va">G.buildG</span><span> </span><span class="ot">(</span><span class="dv">0</span><span class="ot">,</span><span class="dv">2</span><span class="ot">*</span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">concatMap</span><span> </span><span class="ot">(</span><span class="va">clauses</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="va">pn</span><span>
    </span><span class="va">return</span><span> </span><span class="op">$</span><span> </span><span class="ot">(</span><span class="dt">Nothing</span><span> </span><span class="op">/=</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tarjan</span><span> </span><span class="va">pNo</span><span> </span><span class="va">pGraph</span></code></pre></div>
</details>
<p>I’ve included 2SAT-specific functionality for completeness, but I’ll only be
changing the <code>tarjan</code> function and the functions it depends on
(<code>strongConnect</code>, <code>addSCC</code>, <code>push</code>, and <code>pop</code>).</p>
<p>The first change is using more suitable data structures. Tarjan’s algorithm is
only linear in the size of the graph when operations, such as checking if <code>w</code> is
on the stack and looking up indices, happen in constant time (<span class="math inline"><em>O</em>(1)</span>). I’m
currently using <code>Data.Map</code> and <code>Data.Set</code> which are both implemented with trees
and are <span class="math inline"><em>O</em>(log<em>n</em>)</span> in these operations. A better choice would be
<a href="http://hackage.haskell.org/package/vector/docs/Data-Vector-Mutable.html"><code>Data.Vector.Mutable</code></a>
from the <code>vector</code> package, which does have constant-time operations.</p>
<p>This refactoring mostly consists of initialising vectors with a known length
and replacing calls to <code>lookup</code> and <code>insert</code> with calls to <code>read</code> and <code>write</code>.</p>
<details>
<summary style="cursor: pointer">
2SAT.hs using <code>vector</code>
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="pp">{-# LANGUAGE LambdaCase #-}</span><span>

</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Graph</span><span> </span><span class="kw">as</span><span> </span><span class="dt">G</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Array</span><span> </span><span class="kw">as</span><span> </span><span class="dt">A</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Prelude</span><span>    </span><span class="kw">as</span><span> </span><span class="dt">P</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Prelude</span><span> </span><span class="kw">hiding</span><span> </span><span class="ot">(</span><span class="va">lookup</span><span class="ot">,</span><span> </span><span class="va">read</span><span class="ot">,</span><span> </span><span class="va">replicate</span><span class="ot">)</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad.ST</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.STRef</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad</span><span>       </span><span class="ot">(</span><span class="va">forM_</span><span class="ot">,</span><span> </span><span class="va">when</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.Maybe</span><span>          </span><span class="ot">(</span><span class="va">isJust</span><span class="ot">,</span><span> </span><span class="va">isNothing</span><span class="ot">,</span><span> </span><span class="va">fromJust</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.Vector.Mutable</span><span> </span><span class="ot">(</span><span class="dt">STVector</span><span class="ot">,</span><span> </span><span class="va">read</span><span class="ot">,</span><span> </span><span class="va">replicate</span><span class="ot">,</span><span> </span><span class="va">write</span><span class="ot">)</span><span>

</span><span class="va">tarjan</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">]</span><span>
</span><span class="va">tarjan</span><span> </span><span class="va">n</span><span> </span><span class="va">graph</span><span> </span><span class="ot">=</span><span> </span><span class="va">runST</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">index</span><span>    </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="dv">0</span><span>
    </span><span class="va">stack</span><span>    </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">[</span><span class="ot">]</span><span>
    </span><span class="va">stackSet</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">False</span><span>
    </span><span class="va">indices</span><span>  </span><span class="ot">&lt;-</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">Nothing</span><span>
    </span><span class="va">lowlinks</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">Nothing</span><span>
    </span><span class="va">output</span><span>   </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="ot">[</span><span class="ot">]</span><span class="ot">)</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">G.vertices</span><span> </span><span class="va">graph</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">v</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
        </span><span class="va">vIndex</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">v</span><span>
        </span><span class="va">when</span><span> </span><span class="ot">(</span><span class="va">isNothing</span><span> </span><span class="va">vIndex</span><span class="ot">)</span><span> </span><span class="op">$</span><span>
            </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span>

    </span><span class="va">readSTRef</span><span> </span><span class="va">output</span><span>
    </span><span class="kw">where</span><span>
        </span><span class="va">size</span><span> </span><span class="ot">=</span><span> </span><span class="va">snd</span><span> </span><span class="ot">(</span><span class="va">A.bounds</span><span> </span><span class="va">graph</span><span class="ot">)</span><span> </span><span class="op">+</span><span> </span><span class="dv">1</span><span>

</span><span class="va">strongConnect</span><span>
    </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">]</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span>    </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">i</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">index</span><span>
    </span><span class="va">write</span><span> </span><span class="va">indices</span><span>  </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">i</span><span class="ot">)</span><span>
    </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">i</span><span class="ot">)</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">index</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="dv">1</span><span class="ot">)</span><span>
    </span><span class="va">push</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">v</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">graph</span><span> </span><span class="op">A.!</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">w</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="ot">case</span><span>
        </span><span class="dt">Nothing</span><span>     </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span>
            </span><span class="va">vLowLink</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span>
            </span><span class="va">wLowLink</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">w</span><span>
            </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="va">vLowLink</span><span> </span><span class="va">wLowLink</span><span class="ot">)</span><span class="ot">)</span><span>
        </span><span class="dt">Just</span><span> </span><span class="va">wIndex</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">wOnStack</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">read</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">w</span><span>
            </span><span class="va">when</span><span> </span><span class="va">wOnStack</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
                </span><span class="va">vLowLink</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span>
                </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="va">vLowLink</span><span> </span><span class="va">wIndex</span><span class="ot">)</span><span class="ot">)</span><span>

    </span><span class="va">vLowLink</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span>
    </span><span class="va">vIndex</span><span>   </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span>  </span><span class="va">v</span><span>
    </span><span class="va">when</span><span> </span><span class="ot">(</span><span class="va">vLowLink</span><span> </span><span class="op">==</span><span> </span><span class="va">vIndex</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
        </span><span class="va">scc</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="ot">[</span><span class="ot">]</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span>
        </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">output</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">sccs</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="ot">(</span><span class="ot">:</span><span class="ot">)</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">scc</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">sccs</span><span>

</span><span class="va">addSCC</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">)</span><span>
</span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="ot">=</span><span> </span><span class="va">pop</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">if</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span class="ot">)</span><span> </span><span class="ot">`</span><span class="va">elem</span><span class="ot">`</span><span> </span><span class="va">scc</span><span class="ot">)</span><span> </span><span class="kw">then</span><span> </span><span class="va">return</span><span> </span><span class="dt">Nothing</span><span> </span><span class="kw">else</span><span>
    </span><span class="kw">let</span><span> </span><span class="va">scc&#39;</span><span> </span><span class="ot">=</span><span> </span><span class="va">w</span><span class="ot">:</span><span class="va">scc</span><span>
    </span><span class="kw">in</span><span> </span><span class="kw">if</span><span> </span><span class="va">w</span><span> </span><span class="op">==</span><span> </span><span class="va">v</span><span> </span><span class="kw">then</span><span> </span><span class="va">return</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">scc&#39;</span><span class="ot">)</span><span> </span><span class="kw">else</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span>

</span><span class="va">push</span><span> </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">push</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="ot">(</span><span class="va">e</span><span class="ot">:</span><span class="ot">)</span><span>
    </span><span class="va">write</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="dt">True</span><span>

</span><span class="va">pop</span><span> </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
</span><span class="va">pop</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">e</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">head</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">stack</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="va">tail</span><span>
    </span><span class="va">write</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="dt">False</span><span>
    </span><span class="va">return</span><span> </span><span class="va">e</span><span>

</span><span class="va">denormalise</span><span>     </span><span class="ot">=</span><span> </span><span class="va">subtract</span><span>
</span><span class="va">normalise</span><span>       </span><span class="ot">=</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="ot">)</span><span>
</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span>       </span><span class="ot">=</span><span> </span><span class="dv">2</span><span class="ot">*</span><span class="va">n</span><span> </span><span class="op">-</span><span> </span><span class="va">v</span><span>
</span><span class="va">clauses</span><span> </span><span class="va">n</span><span> </span><span class="ot">[</span><span class="va">u</span><span class="ot">,</span><span class="va">v</span><span class="ot">]</span><span> </span><span class="ot">=</span><span> </span><span class="ot">[</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">u</span><span class="ot">,</span><span> </span><span class="va">v</span><span class="ot">)</span><span class="ot">,</span><span> </span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span class="ot">,</span><span> </span><span class="va">u</span><span class="ot">)</span><span class="ot">]</span><span>

</span><span class="va">checkSat</span><span> </span><span class="ot">::</span><span> </span><span class="dt">String</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">IO</span><span> </span><span class="dt">Bool</span><span>
</span><span class="va">checkSat</span><span> </span><span class="va">name</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">p</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="va">P.read</span><span> </span><span class="op">.</span><span> </span><span class="va">words</span><span class="ot">)</span><span> </span><span class="op">.</span><span> </span><span class="va">lines</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readFile</span><span> </span><span class="va">name</span><span>
    </span><span class="kw">let</span><span> </span><span class="va">pNo</span><span>    </span><span class="ot">=</span><span> </span><span class="va">head</span><span> </span><span class="op">$</span><span> </span><span class="va">head</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pn</span><span>     </span><span class="ot">=</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">normalise</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tail</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pGraph</span><span> </span><span class="ot">=</span><span> </span><span class="va">G.buildG</span><span> </span><span class="ot">(</span><span class="dv">0</span><span class="ot">,</span><span class="dv">2</span><span class="ot">*</span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">concatMap</span><span> </span><span class="ot">(</span><span class="va">clauses</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="va">pn</span><span>
    </span><span class="va">return</span><span> </span><span class="op">$</span><span> </span><span class="ot">(</span><span class="dt">Nothing</span><span> </span><span class="op">/=</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tarjan</span><span> </span><span class="va">pNo</span><span> </span><span class="va">pGraph</span></code></pre></div>
</details>
<p>I didn’t notice a significant difference in speed on my inputs, but it’s good
to know that the algorithm has been implemented with the correct asymptotics
now!</p>
<p><em>Sidenote: A <code>Vector</code> of <code>Bool</code>s can be much more compactly represented as a
sequence of 0s and 1s, which are just machine words. For implementations of
this in Haskell, see the <a href="https://hackage.haskell.org/package/bv">bv</a> or
<a href="https://hackage.haskell.org/package/bv-little">bv-little</a> packages. Using
these could be another possible refactoring.</em></p>
<p>Looking at the code again, I notice some repetition of the form</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="va">x</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">lookup</span><span> </span><span class="va">vectorX</span><span> </span><span class="va">i</span><span>
</span><span class="va">y</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">lookup</span><span> </span><span class="va">vectorY</span><span> </span><span class="va">j</span><span>
</span><span class="va">write</span><span> </span><span class="va">vectorZ</span><span> </span><span class="va">k</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="ot">(</span><span class="va">operation</span><span> </span><span class="va">x</span><span> </span><span class="va">y</span><span class="ot">)</span><span class="ot">)</span></code></pre></div>
<p>and with the judicious use of <code>(=&lt;&lt;)</code> and <code>(&lt;*&gt;)</code> this can instead be</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="va">write</span><span> </span><span class="va">vectorZ</span><span> </span><span class="va">k</span><span> </span><span class="op">=&lt;&lt;</span><span> </span><span class="ot">(</span><span class="va">operation</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">lookup</span><span> </span><span class="va">vectorX</span><span> </span><span class="va">i</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">lookup</span><span> </span><span class="va">vectorY</span><span> </span><span class="va">j</span><span class="ot">)</span></code></pre></div>
<p>There are a couple of other places we could use <code>(&lt;*&gt;)</code>:</p>
<details>
<summary style="cursor: pointer">
2SAT.hs using <code>(&lt;*&gt;)</code>
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="pp">{-# LANGUAGE LambdaCase #-}</span><span>

</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Graph</span><span> </span><span class="kw">as</span><span> </span><span class="dt">G</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Array</span><span> </span><span class="kw">as</span><span> </span><span class="dt">A</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Prelude</span><span>    </span><span class="kw">as</span><span> </span><span class="dt">P</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Prelude</span><span> </span><span class="kw">hiding</span><span> </span><span class="ot">(</span><span class="va">lookup</span><span class="ot">,</span><span> </span><span class="va">read</span><span class="ot">,</span><span> </span><span class="va">replicate</span><span class="ot">)</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad.ST</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.STRef</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad</span><span>       </span><span class="ot">(</span><span class="va">forM_</span><span class="ot">,</span><span> </span><span class="va">when</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.Maybe</span><span>          </span><span class="ot">(</span><span class="va">isJust</span><span class="ot">,</span><span> </span><span class="va">isNothing</span><span class="ot">,</span><span> </span><span class="va">fromJust</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.Vector.Mutable</span><span> </span><span class="ot">(</span><span class="dt">STVector</span><span class="ot">,</span><span> </span><span class="va">read</span><span class="ot">,</span><span> </span><span class="va">replicate</span><span class="ot">,</span><span> </span><span class="va">write</span><span class="ot">)</span><span>

</span><span class="va">tarjan</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">]</span><span>
</span><span class="va">tarjan</span><span> </span><span class="va">n</span><span> </span><span class="va">graph</span><span> </span><span class="ot">=</span><span> </span><span class="va">runST</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">index</span><span>    </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="dv">0</span><span>
    </span><span class="va">stack</span><span>    </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">[</span><span class="ot">]</span><span>
    </span><span class="va">stackSet</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">False</span><span>
    </span><span class="va">indices</span><span>  </span><span class="ot">&lt;-</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">Nothing</span><span>
    </span><span class="va">lowlinks</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">Nothing</span><span>
    </span><span class="va">output</span><span>   </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="ot">[</span><span class="ot">]</span><span class="ot">)</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">G.vertices</span><span> </span><span class="va">graph</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">v</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
        </span><span class="va">vIndex</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">v</span><span>
        </span><span class="va">when</span><span> </span><span class="ot">(</span><span class="va">isNothing</span><span> </span><span class="va">vIndex</span><span class="ot">)</span><span> </span><span class="op">$</span><span>
            </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span>

    </span><span class="va">readSTRef</span><span> </span><span class="va">output</span><span>
    </span><span class="kw">where</span><span>
        </span><span class="va">size</span><span> </span><span class="ot">=</span><span> </span><span class="va">snd</span><span> </span><span class="ot">(</span><span class="va">A.bounds</span><span> </span><span class="va">graph</span><span class="ot">)</span><span> </span><span class="op">+</span><span> </span><span class="dv">1</span><span>

</span><span class="va">strongConnect</span><span>
    </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">]</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span>    </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">i</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">index</span><span>
    </span><span class="va">write</span><span> </span><span class="va">indices</span><span>  </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">i</span><span class="ot">)</span><span>
    </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">i</span><span class="ot">)</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">index</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="dv">1</span><span class="ot">)</span><span>
    </span><span class="va">push</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">v</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">graph</span><span> </span><span class="op">A.!</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">w</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="ot">case</span><span>
        </span><span class="dt">Nothing</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span>
            </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">=&lt;&lt;</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">w</span><span class="ot">)</span><span>
        </span><span class="dt">Just</span><span class="ot">{</span><span class="ot">}</span><span>  </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">wOnStack</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">read</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">w</span><span>
            </span><span class="va">when</span><span> </span><span class="va">wOnStack</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
                </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">=&lt;&lt;</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">w</span><span class="ot">)</span><span>

    </span><span class="va">vLowLink</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span>
    </span><span class="va">vIndex</span><span>   </span><span class="ot">&lt;-</span><span> </span><span class="va">fromJust</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span>  </span><span class="va">v</span><span>
    </span><span class="va">when</span><span> </span><span class="ot">(</span><span class="va">vLowLink</span><span> </span><span class="op">==</span><span> </span><span class="va">vIndex</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
        </span><span class="va">scc</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="ot">[</span><span class="ot">]</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span>
        </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">output</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">sccs</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="ot">(</span><span class="ot">:</span><span class="ot">)</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">scc</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">sccs</span><span>

</span><span class="va">addSCC</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">)</span><span>
</span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="ot">=</span><span> </span><span class="va">pop</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">if</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span class="ot">)</span><span> </span><span class="ot">`</span><span class="va">elem</span><span class="ot">`</span><span> </span><span class="va">scc</span><span class="ot">)</span><span> </span><span class="kw">then</span><span> </span><span class="va">return</span><span> </span><span class="dt">Nothing</span><span> </span><span class="kw">else</span><span>
    </span><span class="kw">let</span><span> </span><span class="va">scc&#39;</span><span> </span><span class="ot">=</span><span> </span><span class="va">w</span><span class="ot">:</span><span class="va">scc</span><span>
    </span><span class="kw">in</span><span> </span><span class="kw">if</span><span> </span><span class="va">w</span><span> </span><span class="op">==</span><span> </span><span class="va">v</span><span> </span><span class="kw">then</span><span> </span><span class="va">return</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">scc&#39;</span><span class="ot">)</span><span> </span><span class="kw">else</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span>

</span><span class="va">push</span><span> </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">push</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="ot">(</span><span class="va">e</span><span class="ot">:</span><span class="ot">)</span><span>
    </span><span class="va">write</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="dt">True</span><span>

</span><span class="va">pop</span><span> </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
</span><span class="va">pop</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">e</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">head</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">stack</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="va">tail</span><span>
    </span><span class="va">write</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="dt">False</span><span>
    </span><span class="va">return</span><span> </span><span class="va">e</span><span>

</span><span class="va">denormalise</span><span>     </span><span class="ot">=</span><span> </span><span class="va">subtract</span><span>
</span><span class="va">normalise</span><span>       </span><span class="ot">=</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="ot">)</span><span>
</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span>       </span><span class="ot">=</span><span> </span><span class="dv">2</span><span class="ot">*</span><span class="va">n</span><span> </span><span class="op">-</span><span> </span><span class="va">v</span><span>
</span><span class="va">clauses</span><span> </span><span class="va">n</span><span> </span><span class="ot">[</span><span class="va">u</span><span class="ot">,</span><span class="va">v</span><span class="ot">]</span><span> </span><span class="ot">=</span><span> </span><span class="ot">[</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">u</span><span class="ot">,</span><span> </span><span class="va">v</span><span class="ot">)</span><span class="ot">,</span><span> </span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span class="ot">,</span><span> </span><span class="va">u</span><span class="ot">)</span><span class="ot">]</span><span>

</span><span class="va">checkSat</span><span> </span><span class="ot">::</span><span> </span><span class="dt">String</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">IO</span><span> </span><span class="dt">Bool</span><span>
</span><span class="va">checkSat</span><span> </span><span class="va">name</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">p</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="va">P.read</span><span> </span><span class="op">.</span><span> </span><span class="va">words</span><span class="ot">)</span><span> </span><span class="op">.</span><span> </span><span class="va">lines</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readFile</span><span> </span><span class="va">name</span><span>
    </span><span class="kw">let</span><span> </span><span class="va">pNo</span><span>    </span><span class="ot">=</span><span> </span><span class="va">head</span><span> </span><span class="op">$</span><span> </span><span class="va">head</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pn</span><span>     </span><span class="ot">=</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">normalise</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tail</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pGraph</span><span> </span><span class="ot">=</span><span> </span><span class="va">G.buildG</span><span> </span><span class="ot">(</span><span class="dv">0</span><span class="ot">,</span><span class="dv">2</span><span class="ot">*</span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">concatMap</span><span> </span><span class="ot">(</span><span class="va">clauses</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="va">pn</span><span>
    </span><span class="va">return</span><span> </span><span class="op">$</span><span> </span><span class="ot">(</span><span class="dt">Nothing</span><span> </span><span class="op">/=</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tarjan</span><span> </span><span class="va">pNo</span><span> </span><span class="va">pGraph</span></code></pre></div>
</details>
<p>This is much nicer with the applicative combinators.</p>
<p>I would like to clean up that <code>when</code> as well, and for that I’d need a function
like</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="va">whenM</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Monad</span><span> </span><span class="va">m</span><span> </span><span class="ot">=&gt;</span><span> </span><span class="va">m</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">m</span><span> </span><span class="ot">(</span><span class="ot">)</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">m</span><span> </span><span class="ot">(</span><span class="ot">)</span></code></pre></div>
<p>which is <a href="hackage.haskell.org/package/extra/docs/Control-Monad-Extra.html#v:whenM">available in Neil Mitchell’s <code>extra</code>
package</a>.</p>
<p>I don’t think it’s worth pulling in that dependency though, so I’ll just copy
that definition:</p>
<details>
<summary style="cursor: pointer">
2SAT.hs using <code>whenM</code>
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="pp">{-# LANGUAGE LambdaCase #-}</span><span>

</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Graph</span><span> </span><span class="kw">as</span><span> </span><span class="dt">G</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Array</span><span> </span><span class="kw">as</span><span> </span><span class="dt">A</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Prelude</span><span>    </span><span class="kw">as</span><span> </span><span class="dt">P</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Prelude</span><span> </span><span class="kw">hiding</span><span> </span><span class="ot">(</span><span class="va">lookup</span><span class="ot">,</span><span> </span><span class="va">read</span><span class="ot">,</span><span> </span><span class="va">replicate</span><span class="ot">)</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad.ST</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.STRef</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad</span><span>       </span><span class="ot">(</span><span class="va">forM_</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.Vector.Mutable</span><span> </span><span class="ot">(</span><span class="dt">STVector</span><span class="ot">,</span><span> </span><span class="va">read</span><span class="ot">,</span><span> </span><span class="va">replicate</span><span class="ot">,</span><span> </span><span class="va">write</span><span class="ot">)</span><span>

</span><span class="va">whenM</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Monad</span><span> </span><span class="va">m</span><span> </span><span class="ot">=&gt;</span><span> </span><span class="va">m</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">m</span><span> </span><span class="ot">(</span><span class="ot">)</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">m</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">whenM</span><span> </span><span class="va">condM</span><span> </span><span class="va">block</span><span> </span><span class="ot">=</span><span> </span><span class="va">condM</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="va">cond</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">if</span><span> </span><span class="va">cond</span><span> </span><span class="kw">then</span><span> </span><span class="va">block</span><span> </span><span class="kw">else</span><span> </span><span class="va">return</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>

</span><span class="va">tarjan</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">]</span><span>
</span><span class="va">tarjan</span><span> </span><span class="va">n</span><span> </span><span class="va">graph</span><span> </span><span class="ot">=</span><span> </span><span class="va">runST</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">index</span><span>    </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="dv">0</span><span>
    </span><span class="va">stack</span><span>    </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">[</span><span class="ot">]</span><span>
    </span><span class="va">stackSet</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">False</span><span>
    </span><span class="va">indices</span><span>  </span><span class="ot">&lt;-</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">Nothing</span><span>
    </span><span class="va">lowlinks</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">Nothing</span><span>
    </span><span class="va">output</span><span>   </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="ot">[</span><span class="ot">]</span><span class="ot">)</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">G.vertices</span><span> </span><span class="va">graph</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">v</span><span> </span><span class="ot">-&gt;</span><span>
        </span><span class="va">whenM</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="op">==</span><span class="ot">)</span><span> </span><span class="dt">Nothing</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span>
            </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span>

    </span><span class="va">readSTRef</span><span> </span><span class="va">output</span><span>
    </span><span class="kw">where</span><span>
        </span><span class="va">size</span><span> </span><span class="ot">=</span><span> </span><span class="va">snd</span><span> </span><span class="ot">(</span><span class="va">A.bounds</span><span> </span><span class="va">graph</span><span class="ot">)</span><span> </span><span class="op">+</span><span> </span><span class="dv">1</span><span>

</span><span class="va">strongConnect</span><span>
    </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">]</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span>    </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">i</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">index</span><span>
    </span><span class="va">write</span><span> </span><span class="va">indices</span><span>  </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">i</span><span class="ot">)</span><span>
    </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">i</span><span class="ot">)</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">index</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="dv">1</span><span class="ot">)</span><span>
    </span><span class="va">push</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">v</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">graph</span><span> </span><span class="op">A.!</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">w</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="ot">case</span><span>
        </span><span class="dt">Nothing</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span>
            </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">=&lt;&lt;</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">w</span><span class="ot">)</span><span>
        </span><span class="dt">Just</span><span class="ot">{</span><span class="ot">}</span><span>  </span><span class="ot">-&gt;</span><span> </span><span class="va">whenM</span><span> </span><span class="ot">(</span><span class="va">read</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">w</span><span class="ot">)</span><span> </span><span class="op">$</span><span>
            </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">=&lt;&lt;</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span>  </span><span class="va">w</span><span class="ot">)</span><span>

    </span><span class="va">whenM</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="op">==</span><span class="ot">)</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
        </span><span class="va">scc</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="ot">[</span><span class="ot">]</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span>
        </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">output</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">sccs</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="ot">(</span><span class="ot">:</span><span class="ot">)</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">scc</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">sccs</span><span>

</span><span class="va">addSCC</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">)</span><span>
</span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="ot">=</span><span> </span><span class="va">pop</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">if</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span class="ot">)</span><span> </span><span class="ot">`</span><span class="va">elem</span><span class="ot">`</span><span> </span><span class="va">scc</span><span class="ot">)</span><span> </span><span class="kw">then</span><span> </span><span class="va">return</span><span> </span><span class="dt">Nothing</span><span> </span><span class="kw">else</span><span>
    </span><span class="kw">let</span><span> </span><span class="va">scc&#39;</span><span> </span><span class="ot">=</span><span> </span><span class="va">w</span><span class="ot">:</span><span class="va">scc</span><span>
    </span><span class="kw">in</span><span> </span><span class="kw">if</span><span> </span><span class="va">w</span><span> </span><span class="op">==</span><span> </span><span class="va">v</span><span> </span><span class="kw">then</span><span> </span><span class="va">return</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">scc&#39;</span><span class="ot">)</span><span> </span><span class="kw">else</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span>

</span><span class="va">push</span><span> </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">push</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="ot">(</span><span class="va">e</span><span class="ot">:</span><span class="ot">)</span><span>
    </span><span class="va">write</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="dt">True</span><span>

</span><span class="va">pop</span><span> </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
</span><span class="va">pop</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">e</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">head</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">stack</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="va">tail</span><span>
    </span><span class="va">write</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="dt">False</span><span>
    </span><span class="va">return</span><span> </span><span class="va">e</span><span>

</span><span class="va">denormalise</span><span>     </span><span class="ot">=</span><span> </span><span class="va">subtract</span><span>
</span><span class="va">normalise</span><span>       </span><span class="ot">=</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="ot">)</span><span>
</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span>       </span><span class="ot">=</span><span> </span><span class="dv">2</span><span class="ot">*</span><span class="va">n</span><span> </span><span class="op">-</span><span> </span><span class="va">v</span><span>
</span><span class="va">clauses</span><span> </span><span class="va">n</span><span> </span><span class="ot">[</span><span class="va">u</span><span class="ot">,</span><span class="va">v</span><span class="ot">]</span><span> </span><span class="ot">=</span><span> </span><span class="ot">[</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">u</span><span class="ot">,</span><span> </span><span class="va">v</span><span class="ot">)</span><span class="ot">,</span><span> </span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span class="ot">,</span><span> </span><span class="va">u</span><span class="ot">)</span><span class="ot">]</span><span>

</span><span class="va">checkSat</span><span> </span><span class="ot">::</span><span> </span><span class="dt">String</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">IO</span><span> </span><span class="dt">Bool</span><span>
</span><span class="va">checkSat</span><span> </span><span class="va">name</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">p</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="va">P.read</span><span> </span><span class="op">.</span><span> </span><span class="va">words</span><span class="ot">)</span><span> </span><span class="op">.</span><span> </span><span class="va">lines</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readFile</span><span> </span><span class="va">name</span><span>
    </span><span class="kw">let</span><span> </span><span class="va">pNo</span><span>    </span><span class="ot">=</span><span> </span><span class="va">head</span><span> </span><span class="op">$</span><span> </span><span class="va">head</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pn</span><span>     </span><span class="ot">=</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">normalise</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tail</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pGraph</span><span> </span><span class="ot">=</span><span> </span><span class="va">G.buildG</span><span> </span><span class="ot">(</span><span class="dv">0</span><span class="ot">,</span><span class="dv">2</span><span class="ot">*</span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">concatMap</span><span> </span><span class="ot">(</span><span class="va">clauses</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="va">pn</span><span>
    </span><span class="va">return</span><span> </span><span class="op">$</span><span> </span><span class="ot">(</span><span class="dt">Nothing</span><span> </span><span class="op">/=</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tarjan</span><span> </span><span class="va">pNo</span><span> </span><span class="va">pGraph</span></code></pre></div>
</details>
<p>Now I don’t actually even need <code>when</code> anymore!</p>
<p>Since most of the auxiliary functions aren’t used outside <code>strongConnect</code>, it
might make sense to put them under a <code>where</code> clause. This would also make the
parameters passed to <code>strongConnect</code> available to these functions. This is one
place that the <code>ScopedTypeVariables</code> language extension is necessary, otherwise
GHC can’t tell that the <code>s</code> in the type signature of <code>strongConnect</code> is the
same <code>s</code> as the one in each type signature under the <code>where</code> clause.</p>
<details>
<summary style="cursor: pointer">
2SAT.hs using <code>where</code>
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="pp">{-# LANGUAGE LambdaCase #-}</span><span>
</span><span class="pp">{-# LANGUAGE ScopedTypeVariables #-}</span><span>

</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Graph</span><span> </span><span class="kw">as</span><span> </span><span class="dt">G</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Array</span><span> </span><span class="kw">as</span><span> </span><span class="dt">A</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Prelude</span><span>    </span><span class="kw">as</span><span> </span><span class="dt">P</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Prelude</span><span> </span><span class="kw">hiding</span><span> </span><span class="ot">(</span><span class="va">lookup</span><span class="ot">,</span><span> </span><span class="va">read</span><span class="ot">,</span><span> </span><span class="va">replicate</span><span class="ot">)</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad.ST</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.STRef</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad</span><span>       </span><span class="ot">(</span><span class="va">forM_</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.Vector.Mutable</span><span> </span><span class="ot">(</span><span class="dt">STVector</span><span class="ot">,</span><span> </span><span class="va">read</span><span class="ot">,</span><span> </span><span class="va">replicate</span><span class="ot">,</span><span> </span><span class="va">write</span><span class="ot">)</span><span>

</span><span class="va">whenM</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Monad</span><span> </span><span class="va">m</span><span> </span><span class="ot">=&gt;</span><span> </span><span class="va">m</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">m</span><span> </span><span class="ot">(</span><span class="ot">)</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">m</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">whenM</span><span> </span><span class="va">condM</span><span> </span><span class="va">block</span><span> </span><span class="ot">=</span><span> </span><span class="va">condM</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="va">cond</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">if</span><span> </span><span class="va">cond</span><span> </span><span class="kw">then</span><span> </span><span class="va">block</span><span> </span><span class="kw">else</span><span> </span><span class="va">return</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>

</span><span class="va">tarjan</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">]</span><span>
</span><span class="va">tarjan</span><span> </span><span class="va">n</span><span> </span><span class="va">graph</span><span> </span><span class="ot">=</span><span> </span><span class="va">runST</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">index</span><span>    </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="dv">0</span><span>
    </span><span class="va">stack</span><span>    </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">[</span><span class="ot">]</span><span>
    </span><span class="va">stackSet</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">False</span><span>
    </span><span class="va">indices</span><span>  </span><span class="ot">&lt;-</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">Nothing</span><span>
    </span><span class="va">lowlinks</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">Nothing</span><span>
    </span><span class="va">output</span><span>   </span><span class="ot">&lt;-</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="ot">[</span><span class="ot">]</span><span class="ot">)</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">G.vertices</span><span> </span><span class="va">graph</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">v</span><span> </span><span class="ot">-&gt;</span><span>
        </span><span class="va">whenM</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="op">==</span><span class="ot">)</span><span> </span><span class="dt">Nothing</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span>
            </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span>

    </span><span class="va">readSTRef</span><span> </span><span class="va">output</span><span>
    </span><span class="kw">where</span><span>
        </span><span class="va">size</span><span> </span><span class="ot">=</span><span> </span><span class="va">snd</span><span> </span><span class="ot">(</span><span class="va">A.bounds</span><span> </span><span class="va">graph</span><span class="ot">)</span><span> </span><span class="op">+</span><span> </span><span class="dv">1</span><span>

</span><span class="va">strongConnect</span><span>
    </span><span class="ot">::</span><span> </span><span class="kw">forall</span><span> </span><span class="va">s</span><span>
    </span><span class="op">.</span><span>  </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">]</span><span class="ot">)</span><span>
    </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span>    </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">i</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">index</span><span>
    </span><span class="va">write</span><span> </span><span class="va">indices</span><span>  </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">i</span><span class="ot">)</span><span>
    </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">i</span><span class="ot">)</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">index</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="dv">1</span><span class="ot">)</span><span>
    </span><span class="va">push</span><span> </span><span class="va">v</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">graph</span><span> </span><span class="op">A.!</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">w</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="ot">case</span><span>
        </span><span class="dt">Nothing</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span> </span><span class="va">graph</span><span> </span><span class="va">index</span><span> </span><span class="va">stack</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">indices</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">output</span><span>
            </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">=&lt;&lt;</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">w</span><span class="ot">)</span><span>
        </span><span class="dt">Just</span><span class="ot">{</span><span class="ot">}</span><span>  </span><span class="ot">-&gt;</span><span> </span><span class="va">whenM</span><span> </span><span class="ot">(</span><span class="va">read</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">w</span><span class="ot">)</span><span> </span><span class="op">$</span><span>
            </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">=&lt;&lt;</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span>  </span><span class="va">w</span><span class="ot">)</span><span>

    </span><span class="va">whenM</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="op">==</span><span class="ot">)</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
        </span><span class="va">scc</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="ot">[</span><span class="ot">]</span><span>
        </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">output</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">sccs</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="ot">(</span><span class="ot">:</span><span class="ot">)</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">scc</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">sccs</span><span>
    </span><span class="kw">where</span><span>
        </span><span class="va">addSCC</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">)</span><span>
        </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc</span><span> </span><span class="ot">=</span><span> </span><span class="va">pop</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">if</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span class="ot">)</span><span> </span><span class="ot">`</span><span class="va">elem</span><span class="ot">`</span><span> </span><span class="va">scc</span><span class="ot">)</span><span> </span><span class="kw">then</span><span> </span><span class="va">return</span><span> </span><span class="dt">Nothing</span><span> </span><span class="kw">else</span><span>
            </span><span class="kw">let</span><span> </span><span class="va">scc&#39;</span><span> </span><span class="ot">=</span><span> </span><span class="va">w</span><span class="ot">:</span><span class="va">scc</span><span>
            </span><span class="kw">in</span><span> </span><span class="kw">if</span><span> </span><span class="va">w</span><span> </span><span class="op">==</span><span> </span><span class="va">v</span><span> </span><span class="kw">then</span><span> </span><span class="va">return</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">scc&#39;</span><span class="ot">)</span><span> </span><span class="kw">else</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc&#39;</span><span>
        </span><span class="va">push</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
        </span><span class="va">push</span><span> </span><span class="va">e</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="ot">(</span><span class="va">e</span><span class="ot">:</span><span class="ot">)</span><span>
            </span><span class="va">write</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="dt">True</span><span>
        </span><span class="va">pop</span><span> </span><span class="ot">::</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
        </span><span class="va">pop</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">e</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">head</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">stack</span><span>
            </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="va">tail</span><span>
            </span><span class="va">write</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="dt">False</span><span>
            </span><span class="va">return</span><span> </span><span class="va">e</span><span>

</span><span class="va">denormalise</span><span>     </span><span class="ot">=</span><span> </span><span class="va">subtract</span><span>
</span><span class="va">normalise</span><span>       </span><span class="ot">=</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="ot">)</span><span>
</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span>       </span><span class="ot">=</span><span> </span><span class="dv">2</span><span class="ot">*</span><span class="va">n</span><span> </span><span class="op">-</span><span> </span><span class="va">v</span><span>
</span><span class="va">clauses</span><span> </span><span class="va">n</span><span> </span><span class="ot">[</span><span class="va">u</span><span class="ot">,</span><span class="va">v</span><span class="ot">]</span><span> </span><span class="ot">=</span><span> </span><span class="ot">[</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">u</span><span class="ot">,</span><span> </span><span class="va">v</span><span class="ot">)</span><span class="ot">,</span><span> </span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span class="ot">,</span><span> </span><span class="va">u</span><span class="ot">)</span><span class="ot">]</span><span>

</span><span class="va">checkSat</span><span> </span><span class="ot">::</span><span> </span><span class="dt">String</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">IO</span><span> </span><span class="dt">Bool</span><span>
</span><span class="va">checkSat</span><span> </span><span class="va">name</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">p</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="va">P.read</span><span> </span><span class="op">.</span><span> </span><span class="va">words</span><span class="ot">)</span><span> </span><span class="op">.</span><span> </span><span class="va">lines</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readFile</span><span> </span><span class="va">name</span><span>
    </span><span class="kw">let</span><span> </span><span class="va">pNo</span><span>    </span><span class="ot">=</span><span> </span><span class="va">head</span><span> </span><span class="op">$</span><span> </span><span class="va">head</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pn</span><span>     </span><span class="ot">=</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">normalise</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tail</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pGraph</span><span> </span><span class="ot">=</span><span> </span><span class="va">G.buildG</span><span> </span><span class="ot">(</span><span class="dv">0</span><span class="ot">,</span><span class="dv">2</span><span class="ot">*</span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">concatMap</span><span> </span><span class="ot">(</span><span class="va">clauses</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="va">pn</span><span>
    </span><span class="va">return</span><span> </span><span class="op">$</span><span> </span><span class="ot">(</span><span class="dt">Nothing</span><span> </span><span class="op">/=</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tarjan</span><span> </span><span class="va">pNo</span><span> </span><span class="va">pGraph</span></code></pre></div>
</details>
<p>I think the logic is clearer now that the auxiliary functions take fewer
arguments.</p>
<p>Instead of a large number of implictly related variables, it might be nice to
define a single product type containing our entire environment and pass just
one value around. With <code>NamedFieldPuns</code> only minimal code changes are required:</p>
<details>
<summary style="cursor: pointer">
2SAT.hs using <code>NamedFieldPuns</code>
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="pp">{-# LANGUAGE LambdaCase #-}</span><span>
</span><span class="pp">{-# LANGUAGE NamedFieldPuns #-}</span><span>
</span><span class="pp">{-# LANGUAGE ScopedTypeVariables #-}</span><span>

</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Graph</span><span> </span><span class="kw">as</span><span> </span><span class="dt">G</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Array</span><span> </span><span class="kw">as</span><span> </span><span class="dt">A</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Prelude</span><span>    </span><span class="kw">as</span><span> </span><span class="dt">P</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Prelude</span><span> </span><span class="kw">hiding</span><span> </span><span class="ot">(</span><span class="va">lookup</span><span class="ot">,</span><span> </span><span class="va">read</span><span class="ot">,</span><span> </span><span class="va">replicate</span><span class="ot">)</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad.ST</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.STRef</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad</span><span>       </span><span class="ot">(</span><span class="va">forM_</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.Vector.Mutable</span><span> </span><span class="ot">(</span><span class="dt">STVector</span><span class="ot">,</span><span> </span><span class="va">read</span><span class="ot">,</span><span> </span><span class="va">replicate</span><span class="ot">,</span><span> </span><span class="va">write</span><span class="ot">)</span><span>

</span><span class="kw">data</span><span> </span><span class="dt">TarjanEnv</span><span> </span><span class="va">s</span><span> </span><span class="ot">=</span><span> </span><span class="dt">TarjanEnv</span><span>
    </span><span class="ot">{</span><span> </span><span class="va">index</span><span>    </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">,</span><span> </span><span class="va">stack</span><span>    </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span>
    </span><span class="ot">,</span><span> </span><span class="va">stackSet</span><span> </span><span class="ot">::</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span>
    </span><span class="ot">,</span><span> </span><span class="va">indices</span><span>  </span><span class="ot">::</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">,</span><span> </span><span class="va">lowlinks</span><span> </span><span class="ot">::</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">,</span><span> </span><span class="va">output</span><span>   </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">]</span><span class="ot">)</span><span>
    </span><span class="ot">}</span><span>

</span><span class="va">whenM</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Monad</span><span> </span><span class="va">m</span><span> </span><span class="ot">=&gt;</span><span> </span><span class="va">m</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">m</span><span> </span><span class="ot">(</span><span class="ot">)</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">m</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">whenM</span><span> </span><span class="va">condM</span><span> </span><span class="va">block</span><span> </span><span class="ot">=</span><span> </span><span class="va">condM</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="va">cond</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">if</span><span> </span><span class="va">cond</span><span> </span><span class="kw">then</span><span> </span><span class="va">block</span><span> </span><span class="kw">else</span><span> </span><span class="va">return</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>

</span><span class="va">tarjan</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">]</span><span>
</span><span class="va">tarjan</span><span> </span><span class="va">n</span><span> </span><span class="va">graph</span><span> </span><span class="ot">=</span><span> </span><span class="va">runST</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">tarjanEnv</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="dt">TarjanEnv</span><span>
        </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">newSTRef</span><span> </span><span class="dv">0</span><span>
        </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">[</span><span class="ot">]</span><span>
        </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">False</span><span>
        </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">Nothing</span><span>
        </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">Nothing</span><span>
        </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="ot">[</span><span class="ot">]</span><span class="ot">)</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">G.vertices</span><span> </span><span class="va">graph</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">v</span><span> </span><span class="ot">-&gt;</span><span>
        </span><span class="va">whenM</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="op">==</span><span class="ot">)</span><span> </span><span class="dt">Nothing</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="ot">(</span><span class="va">indices</span><span> </span><span class="va">tarjanEnv</span><span class="ot">)</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span>
            </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">tarjanEnv</span><span>

    </span><span class="va">readSTRef</span><span> </span><span class="ot">(</span><span class="va">output</span><span> </span><span class="va">tarjanEnv</span><span class="ot">)</span><span>
    </span><span class="kw">where</span><span>
        </span><span class="va">size</span><span> </span><span class="ot">=</span><span> </span><span class="va">snd</span><span> </span><span class="ot">(</span><span class="va">A.bounds</span><span> </span><span class="va">graph</span><span class="ot">)</span><span> </span><span class="op">+</span><span> </span><span class="dv">1</span><span>

</span><span class="va">strongConnect</span><span> </span><span class="ot">::</span><span> </span><span class="kw">forall</span><span> </span><span class="va">s</span><span class="op">.</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">TarjanEnv</span><span> </span><span class="va">s</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">tarjanEnv</span><span class="ot">@</span><span class="dt">TarjanEnv</span><span class="ot">{</span><span> </span><span class="va">index</span><span class="ot">,</span><span> </span><span class="va">stack</span><span class="ot">,</span><span> </span><span class="va">stackSet</span><span class="ot">,</span><span> </span><span class="va">indices</span><span class="ot">,</span><span> </span><span class="va">lowlinks</span><span class="ot">,</span><span> </span><span class="va">output</span><span> </span><span class="ot">}</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">i</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">index</span><span>
    </span><span class="va">write</span><span> </span><span class="va">indices</span><span>  </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">i</span><span class="ot">)</span><span>
    </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">i</span><span class="ot">)</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">index</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="dv">1</span><span class="ot">)</span><span>
    </span><span class="va">push</span><span> </span><span class="va">v</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">graph</span><span> </span><span class="op">A.!</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">w</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="ot">case</span><span>
        </span><span class="dt">Nothing</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span> </span><span class="va">graph</span><span> </span><span class="va">tarjanEnv</span><span>
            </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">=&lt;&lt;</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">w</span><span class="ot">)</span><span>
        </span><span class="dt">Just</span><span class="ot">{</span><span class="ot">}</span><span>  </span><span class="ot">-&gt;</span><span> </span><span class="va">whenM</span><span> </span><span class="ot">(</span><span class="va">read</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">w</span><span class="ot">)</span><span> </span><span class="op">$</span><span>
            </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">=&lt;&lt;</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span>  </span><span class="va">w</span><span class="ot">)</span><span>

    </span><span class="va">whenM</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="op">==</span><span class="ot">)</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
        </span><span class="va">scc</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="ot">[</span><span class="ot">]</span><span>
        </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">output</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">sccs</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="ot">(</span><span class="ot">:</span><span class="ot">)</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">scc</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">sccs</span><span>
    </span><span class="kw">where</span><span>
        </span><span class="va">addSCC</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">)</span><span>
        </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc</span><span> </span><span class="ot">=</span><span> </span><span class="va">pop</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">if</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span class="ot">)</span><span> </span><span class="ot">`</span><span class="va">elem</span><span class="ot">`</span><span> </span><span class="va">scc</span><span class="ot">)</span><span> </span><span class="kw">then</span><span> </span><span class="va">return</span><span> </span><span class="dt">Nothing</span><span> </span><span class="kw">else</span><span>
            </span><span class="kw">let</span><span> </span><span class="va">scc&#39;</span><span> </span><span class="ot">=</span><span> </span><span class="va">w</span><span class="ot">:</span><span class="va">scc</span><span>
            </span><span class="kw">in</span><span> </span><span class="kw">if</span><span> </span><span class="va">w</span><span> </span><span class="op">==</span><span> </span><span class="va">v</span><span> </span><span class="kw">then</span><span> </span><span class="va">return</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">scc&#39;</span><span class="ot">)</span><span> </span><span class="kw">else</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc&#39;</span><span>
        </span><span class="va">push</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
        </span><span class="va">push</span><span> </span><span class="va">e</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="ot">(</span><span class="va">e</span><span class="ot">:</span><span class="ot">)</span><span>
            </span><span class="va">write</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="dt">True</span><span>
        </span><span class="va">pop</span><span> </span><span class="ot">::</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
        </span><span class="va">pop</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">e</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">head</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">stack</span><span>
            </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="va">tail</span><span>
            </span><span class="va">write</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="dt">False</span><span>
            </span><span class="va">return</span><span> </span><span class="va">e</span><span>

</span><span class="va">denormalise</span><span>     </span><span class="ot">=</span><span> </span><span class="va">subtract</span><span>
</span><span class="va">normalise</span><span>       </span><span class="ot">=</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="ot">)</span><span>
</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span>       </span><span class="ot">=</span><span> </span><span class="dv">2</span><span class="ot">*</span><span class="va">n</span><span> </span><span class="op">-</span><span> </span><span class="va">v</span><span>
</span><span class="va">clauses</span><span> </span><span class="va">n</span><span> </span><span class="ot">[</span><span class="va">u</span><span class="ot">,</span><span class="va">v</span><span class="ot">]</span><span> </span><span class="ot">=</span><span> </span><span class="ot">[</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">u</span><span class="ot">,</span><span> </span><span class="va">v</span><span class="ot">)</span><span class="ot">,</span><span> </span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span class="ot">,</span><span> </span><span class="va">u</span><span class="ot">)</span><span class="ot">]</span><span>

</span><span class="va">checkSat</span><span> </span><span class="ot">::</span><span> </span><span class="dt">String</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">IO</span><span> </span><span class="dt">Bool</span><span>
</span><span class="va">checkSat</span><span> </span><span class="va">name</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">p</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="va">P.read</span><span> </span><span class="op">.</span><span> </span><span class="va">words</span><span class="ot">)</span><span> </span><span class="op">.</span><span> </span><span class="va">lines</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readFile</span><span> </span><span class="va">name</span><span>
    </span><span class="kw">let</span><span> </span><span class="va">pNo</span><span>    </span><span class="ot">=</span><span> </span><span class="va">head</span><span> </span><span class="op">$</span><span> </span><span class="va">head</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pn</span><span>     </span><span class="ot">=</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">normalise</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tail</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pGraph</span><span> </span><span class="ot">=</span><span> </span><span class="va">G.buildG</span><span> </span><span class="ot">(</span><span class="dv">0</span><span class="ot">,</span><span class="dv">2</span><span class="ot">*</span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">concatMap</span><span> </span><span class="ot">(</span><span class="va">clauses</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="va">pn</span><span>
    </span><span class="va">return</span><span> </span><span class="op">$</span><span> </span><span class="ot">(</span><span class="dt">Nothing</span><span> </span><span class="op">/=</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tarjan</span><span> </span><span class="va">pNo</span><span> </span><span class="va">pGraph</span></code></pre></div>
</details>
<p>Let’s pause here. Although more refactoring is certainly possible, my last two
steps did not reduce the line count and may have in fact made the code harder
to understand.</p>
<p>How have we benefited from this refactoring? Aside from the code being shorter
and better structured, it’s now easier to make meaningful improvements. For
example, this implementation is more inefficient than it needs to be, because
it doesn’t short-circuit when it finds that the current problem is
unsatisfiable. Instead it works through the rest of the problem, only to throw
all that work away. A sophisticated solution to this problem might involve the
use of the
<a href="https://hackage.haskell.org/package/transformers/docs/Control-Monad-Trans-Except.html"><code>ExceptT</code></a>
monad transformer to throw an exception and exit early, but there is a simpler
approach: we can store an extra boolean variable denoting whether or not the
current problem is possibly satisfiable, and only continue working if it is.
I’ll call this variable <code>possible</code>, update it in <code>addSCC</code>, and check for it
before each call to <code>strongConnect</code> in <code>tarjan</code>. It takes more effort to
reformat the code than to make this change:</p>
<details>
<summary style="cursor: pointer">
2SAT.hs with short-circuiting
</summary>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="pp">{-# LANGUAGE LambdaCase #-}</span><span>
</span><span class="pp">{-# LANGUAGE NamedFieldPuns #-}</span><span>
</span><span class="pp">{-# LANGUAGE ScopedTypeVariables #-}</span><span>

</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Graph</span><span> </span><span class="kw">as</span><span> </span><span class="dt">G</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Data.Array</span><span> </span><span class="kw">as</span><span> </span><span class="dt">A</span><span>
</span><span class="kw">import</span><span> </span><span class="kw">qualified</span><span> </span><span class="dt">Prelude</span><span>    </span><span class="kw">as</span><span> </span><span class="dt">P</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Prelude</span><span> </span><span class="kw">hiding</span><span> </span><span class="ot">(</span><span class="va">lookup</span><span class="ot">,</span><span> </span><span class="va">read</span><span class="ot">,</span><span> </span><span class="va">replicate</span><span class="ot">)</span><span>

</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad.ST</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.STRef</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Control.Monad</span><span>       </span><span class="ot">(</span><span class="va">forM_</span><span class="ot">)</span><span>
</span><span class="kw">import</span><span> </span><span class="dt">Data.Vector.Mutable</span><span> </span><span class="ot">(</span><span class="dt">STVector</span><span class="ot">,</span><span> </span><span class="va">read</span><span class="ot">,</span><span> </span><span class="va">replicate</span><span class="ot">,</span><span> </span><span class="va">write</span><span class="ot">)</span><span>

</span><span class="kw">data</span><span> </span><span class="dt">TarjanEnv</span><span> </span><span class="va">s</span><span> </span><span class="ot">=</span><span> </span><span class="dt">TarjanEnv</span><span>
    </span><span class="ot">{</span><span> </span><span class="va">index</span><span>    </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
    </span><span class="ot">,</span><span> </span><span class="va">stack</span><span>    </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span>
    </span><span class="ot">,</span><span> </span><span class="va">stackSet</span><span> </span><span class="ot">::</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span>
    </span><span class="ot">,</span><span> </span><span class="va">indices</span><span>  </span><span class="ot">::</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">,</span><span> </span><span class="va">lowlinks</span><span> </span><span class="ot">::</span><span> </span><span class="dt">STVector</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="dt">Int</span><span class="ot">)</span><span>
    </span><span class="ot">,</span><span> </span><span class="va">output</span><span>   </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">]</span><span class="ot">)</span><span>
    </span><span class="ot">,</span><span> </span><span class="va">possible</span><span> </span><span class="ot">::</span><span> </span><span class="dt">STRef</span><span> </span><span class="va">s</span><span> </span><span class="dt">Bool</span><span>
    </span><span class="ot">}</span><span>

</span><span class="va">whenM</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Monad</span><span> </span><span class="va">m</span><span> </span><span class="ot">=&gt;</span><span> </span><span class="va">m</span><span> </span><span class="dt">Bool</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">m</span><span> </span><span class="ot">(</span><span class="ot">)</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">m</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">whenM</span><span> </span><span class="va">condM</span><span> </span><span class="va">block</span><span> </span><span class="ot">=</span><span> </span><span class="va">condM</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="va">cond</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">if</span><span> </span><span class="va">cond</span><span> </span><span class="kw">then</span><span> </span><span class="va">block</span><span> </span><span class="kw">else</span><span> </span><span class="va">return</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>

</span><span class="va">tarjan</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">]</span><span>
</span><span class="va">tarjan</span><span> </span><span class="va">n</span><span> </span><span class="va">graph</span><span> </span><span class="ot">=</span><span> </span><span class="va">runST</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">tarjanEnv</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="dt">TarjanEnv</span><span>
        </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">newSTRef</span><span> </span><span class="dv">0</span><span>
        </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">[</span><span class="ot">]</span><span>
        </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">False</span><span>
        </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">Nothing</span><span>
        </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">replicate</span><span> </span><span class="va">size</span><span> </span><span class="dt">Nothing</span><span>
        </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">newSTRef</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="ot">[</span><span class="ot">]</span><span class="ot">)</span><span>
        </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">newSTRef</span><span> </span><span class="dt">True</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">G.vertices</span><span> </span><span class="va">graph</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">v</span><span> </span><span class="ot">-&gt;</span><span>
        </span><span class="va">whenM</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="op">&amp;&amp;</span><span class="ot">)</span><span>
            </span><span class="op">&lt;$&gt;</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="op">==</span><span class="ot">)</span><span> </span><span class="dt">Nothing</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="ot">(</span><span class="va">indices</span><span> </span><span class="va">tarjanEnv</span><span class="ot">)</span><span> </span><span class="va">v</span><span class="ot">)</span><span>
            </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">readSTRef</span><span> </span><span class="ot">(</span><span class="va">possible</span><span> </span><span class="va">tarjanEnv</span><span class="ot">)</span><span class="ot">)</span><span> </span><span class="op">$</span><span>
                </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">tarjanEnv</span><span>

    </span><span class="va">readSTRef</span><span> </span><span class="ot">(</span><span class="va">output</span><span> </span><span class="va">tarjanEnv</span><span class="ot">)</span><span>
    </span><span class="kw">where</span><span>
        </span><span class="va">size</span><span> </span><span class="ot">=</span><span> </span><span class="va">snd</span><span> </span><span class="ot">(</span><span class="va">A.bounds</span><span> </span><span class="va">graph</span><span class="ot">)</span><span> </span><span class="op">+</span><span> </span><span class="dv">1</span><span>

</span><span class="va">strongConnect</span><span> </span><span class="ot">::</span><span> </span><span class="kw">forall</span><span> </span><span class="va">s</span><span class="op">.</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">G.Graph</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">TarjanEnv</span><span> </span><span class="va">s</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
</span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">graph</span><span> </span><span class="va">tarjanEnv</span><span class="ot">@</span><span class="dt">TarjanEnv</span><span class="ot">{</span><span> </span><span class="va">index</span><span class="ot">,</span><span> </span><span class="va">stack</span><span class="ot">,</span><span> </span><span class="va">stackSet</span><span class="ot">,</span><span> </span><span class="va">indices</span><span class="ot">,</span><span> </span><span class="va">lowlinks</span><span class="ot">,</span><span> </span><span class="va">output</span><span class="ot">,</span><span> </span><span class="va">possible</span><span> </span><span class="ot">}</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">i</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">index</span><span>
    </span><span class="va">write</span><span> </span><span class="va">indices</span><span>  </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">i</span><span class="ot">)</span><span>
    </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">i</span><span class="ot">)</span><span>
    </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">index</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="dv">1</span><span class="ot">)</span><span>
    </span><span class="va">push</span><span> </span><span class="va">v</span><span>

    </span><span class="va">forM_</span><span> </span><span class="ot">(</span><span class="va">graph</span><span> </span><span class="op">A.!</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">w</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="ot">case</span><span>
        </span><span class="dt">Nothing</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">strongConnect</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span> </span><span class="va">graph</span><span> </span><span class="va">tarjanEnv</span><span>
            </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">=&lt;&lt;</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">w</span><span class="ot">)</span><span>
        </span><span class="dt">Just</span><span class="ot">{</span><span class="ot">}</span><span>  </span><span class="ot">-&gt;</span><span> </span><span class="va">whenM</span><span> </span><span class="ot">(</span><span class="va">read</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">w</span><span class="ot">)</span><span> </span><span class="op">$</span><span>
            </span><span class="va">write</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">=&lt;&lt;</span><span> </span><span class="ot">(</span><span class="va">min</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span>  </span><span class="va">w</span><span class="ot">)</span><span>

    </span><span class="va">whenM</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="op">==</span><span class="ot">)</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">lowlinks</span><span> </span><span class="va">v</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">read</span><span> </span><span class="va">indices</span><span> </span><span class="va">v</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="kw">do</span><span>
        </span><span class="va">scc</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="ot">[</span><span class="ot">]</span><span>
        </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">output</span><span> </span><span class="op">$</span><span> </span><span class="ot">\</span><span class="va">sccs</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="ot">(</span><span class="ot">:</span><span class="ot">)</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">scc</span><span> </span><span class="op">&lt;*&gt;</span><span> </span><span class="va">sccs</span><span>
    </span><span class="kw">where</span><span>
        </span><span class="va">addSCC</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="dt">Maybe</span><span> </span><span class="ot">[</span><span class="dt">Int</span><span class="ot">]</span><span class="ot">)</span><span>
        </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc</span><span> </span><span class="ot">=</span><span> </span><span class="va">pop</span><span> </span><span class="op">&gt;&gt;=</span><span> </span><span class="ot">\</span><span class="va">w</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="kw">if</span><span> </span><span class="ot">(</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">w</span><span class="ot">)</span><span> </span><span class="ot">`</span><span class="va">elem</span><span class="ot">`</span><span> </span><span class="va">scc</span><span class="ot">)</span><span>
            </span><span class="kw">then</span><span> </span><span class="va">writeSTRef</span><span> </span><span class="va">possible</span><span> </span><span class="dt">False</span><span> </span><span class="op">&gt;&gt;</span><span> </span><span class="va">return</span><span> </span><span class="dt">Nothing</span><span>
            </span><span class="kw">else</span><span>
                </span><span class="kw">let</span><span> </span><span class="va">scc&#39;</span><span> </span><span class="ot">=</span><span> </span><span class="va">w</span><span class="ot">:</span><span class="va">scc</span><span>
                </span><span class="kw">in</span><span> </span><span class="kw">if</span><span> </span><span class="va">w</span><span> </span><span class="op">==</span><span> </span><span class="va">v</span><span> </span><span class="kw">then</span><span> </span><span class="va">return</span><span> </span><span class="ot">(</span><span class="dt">Just</span><span> </span><span class="va">scc&#39;</span><span class="ot">)</span><span> </span><span class="kw">else</span><span> </span><span class="va">addSCC</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span> </span><span class="va">scc&#39;</span><span>
        </span><span class="va">push</span><span> </span><span class="ot">::</span><span> </span><span class="dt">Int</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="ot">(</span><span class="ot">)</span><span>
        </span><span class="va">push</span><span> </span><span class="va">e</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="ot">(</span><span class="va">e</span><span class="ot">:</span><span class="ot">)</span><span>
            </span><span class="va">write</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="dt">True</span><span>
        </span><span class="va">pop</span><span> </span><span class="ot">::</span><span> </span><span class="dt">ST</span><span> </span><span class="va">s</span><span> </span><span class="dt">Int</span><span>
        </span><span class="va">pop</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
            </span><span class="va">e</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">head</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readSTRef</span><span> </span><span class="va">stack</span><span>
            </span><span class="va">modifySTRef&#39;</span><span> </span><span class="va">stack</span><span> </span><span class="va">tail</span><span>
            </span><span class="va">write</span><span> </span><span class="va">stackSet</span><span> </span><span class="va">e</span><span> </span><span class="dt">False</span><span>
            </span><span class="va">return</span><span> </span><span class="va">e</span><span>

</span><span class="va">denormalise</span><span>     </span><span class="ot">=</span><span> </span><span class="va">subtract</span><span>
</span><span class="va">normalise</span><span>       </span><span class="ot">=</span><span> </span><span class="ot">(</span><span class="op">+</span><span class="ot">)</span><span>
</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span>       </span><span class="ot">=</span><span> </span><span class="dv">2</span><span class="ot">*</span><span class="va">n</span><span> </span><span class="op">-</span><span> </span><span class="va">v</span><span>
</span><span class="va">clauses</span><span> </span><span class="va">n</span><span> </span><span class="ot">[</span><span class="va">u</span><span class="ot">,</span><span class="va">v</span><span class="ot">]</span><span> </span><span class="ot">=</span><span> </span><span class="ot">[</span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">u</span><span class="ot">,</span><span> </span><span class="va">v</span><span class="ot">)</span><span class="ot">,</span><span> </span><span class="ot">(</span><span class="va">other</span><span> </span><span class="va">n</span><span> </span><span class="va">v</span><span class="ot">,</span><span> </span><span class="va">u</span><span class="ot">)</span><span class="ot">]</span><span>

</span><span class="va">checkSat</span><span> </span><span class="ot">::</span><span> </span><span class="dt">String</span><span> </span><span class="ot">-&gt;</span><span> </span><span class="dt">IO</span><span> </span><span class="dt">Bool</span><span>
</span><span class="va">checkSat</span><span> </span><span class="va">name</span><span> </span><span class="ot">=</span><span> </span><span class="kw">do</span><span>
    </span><span class="va">p</span><span> </span><span class="ot">&lt;-</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="va">P.read</span><span> </span><span class="op">.</span><span> </span><span class="va">words</span><span class="ot">)</span><span> </span><span class="op">.</span><span> </span><span class="va">lines</span><span> </span><span class="op">&lt;$&gt;</span><span> </span><span class="va">readFile</span><span> </span><span class="va">name</span><span>
    </span><span class="kw">let</span><span> </span><span class="va">pNo</span><span>    </span><span class="ot">=</span><span> </span><span class="va">head</span><span> </span><span class="op">$</span><span> </span><span class="va">head</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pn</span><span>     </span><span class="ot">=</span><span> </span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">map</span><span> </span><span class="ot">(</span><span class="va">normalise</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tail</span><span> </span><span class="va">p</span><span>
        </span><span class="va">pGraph</span><span> </span><span class="ot">=</span><span> </span><span class="va">G.buildG</span><span> </span><span class="ot">(</span><span class="dv">0</span><span class="ot">,</span><span class="dv">2</span><span class="ot">*</span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">concatMap</span><span> </span><span class="ot">(</span><span class="va">clauses</span><span> </span><span class="va">pNo</span><span class="ot">)</span><span> </span><span class="va">pn</span><span>
    </span><span class="va">return</span><span> </span><span class="op">$</span><span> </span><span class="ot">(</span><span class="dt">Nothing</span><span> </span><span class="op">/=</span><span class="ot">)</span><span> </span><span class="op">$</span><span> </span><span class="va">tarjan</span><span> </span><span class="va">pNo</span><span> </span><span class="va">pGraph</span></code></pre></div>
</details>
<p>This change does seem to make a significant difference, and it’s good to know
we’re not doing useless work.</p>
<p>I think this is a good place to stop, and I hope I’ve been able to demonstrate
some of Haskell’s strengths when it comes to refactoring. In my experience,
it’s not usually necessary to deeply understand Haskell code in order to
attempt a refactoring, especially if it’s backed by well-chosen types and a
good test suite. I also find that I’m able to be more daring when writing new
code, because bad up-front design is less costly and even the jankiest working
code can be gently massaged into something presentable.</p>
<p><em>Thanks to
<a href="https://joelburget.com/">Joel Burget</a>, <a href="http://www.matfournier.com/">Mat Fournier</a>, <a href="https://eskimor.gonimo.com/">Robert Klotzner</a>, <a href="https://github.com/L8D">Tenor</a>, <a href="http://www.tomharding.me/">Tom Harding</a>, and <a href="http://www.tylerweir.com/">Tyler Weir</a> for suggestions and
feedback.</em></p>
</summary>
</entry>

</feed>
